// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.0.0.317
//    <NameSpace>Reyx.Nfe.PL_006u</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net45</CodeBaseTag><InitializeFields>None</InitializeFields><GenerateUnusedComplexTypes>False</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>False</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>True</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>StartWithUnderscore</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><ClassNamePrefix></ClassNamePrefix><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>False</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>False</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>False</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><GenerateShouldSerialize>False</GenerateShouldSerialize><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace Reyx.Nfe.PL_006u
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe")]
    [System.Xml.Serialization.XmlRootAttribute("nfeProc", Namespace="http://www.portalfiscal.inf.br/nfe", IsNullable=false)]
    public partial class TNfeProc
    {
        
        private TNFe _nFe;
        
        private TProtNFe _protNFe;
        
        private string _versao;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TNFe NFe
        {
            get
            {
                return this._nFe;
            }
            set
            {
                this._nFe = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public TProtNFe protNFe
        {
            get
            {
                return this._protNFe;
            }
            set
            {
                this._protNFe = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string versao
        {
            get
            {
                return this._versao;
            }
            set
            {
                this._versao = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNfeProc));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNfeProc object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNfeProc object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNfeProc obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNfeProc);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNfeProc obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNfeProc Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNfeProc)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNfeProc Deserialize(System.IO.Stream s)
        {
            return ((TNfeProc)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNfeProc object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNfeProc object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNfeProc obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNfeProc);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNfeProc obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNfeProc LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFe
    {
        
        private TNFeInfNFe _infNFe;
        
        private SignatureType _signature;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TNFeInfNFe infNFe
        {
            get
            {
                return this._infNFe;
            }
            set
            {
                this._infNFe = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://www.w3.org/2000/09/xmldsig#", Order=1)]
        public SignatureType Signature
        {
            get
            {
                return this._signature;
            }
            set
            {
                this._signature = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFe));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFe object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFe object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFe obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFe);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFe obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFe Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFe)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFe Deserialize(System.IO.Stream s)
        {
            return ((TNFe)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFe object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFe object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFe obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFe);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFe obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFe LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFe
    {
        
        private TNFeInfNFeIde _ide;
        
        private TNFeInfNFeEmit _emit;
        
        private TNFeInfNFeAvulsa _avulsa;
        
        private TNFeInfNFeDest _dest;
        
        private TLocal _retirada;
        
        private TLocal _entrega;
        
        private List<TNFeInfNFeDet> _det;
        
        private TNFeInfNFeTotal _total;
        
        private TNFeInfNFeTransp _transp;
        
        private TNFeInfNFeCobr _cobr;
        
        private TNFeInfNFeInfAdic _infAdic;
        
        private TNFeInfNFeExporta _exporta;
        
        private TNFeInfNFeCompra _compra;
        
        private TNFeInfNFeCana _cana;
        
        private string _versao;
        
        private string _id;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TNFeInfNFeIde ide
        {
            get
            {
                return this._ide;
            }
            set
            {
                this._ide = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public TNFeInfNFeEmit emit
        {
            get
            {
                return this._emit;
            }
            set
            {
                this._emit = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public TNFeInfNFeAvulsa avulsa
        {
            get
            {
                return this._avulsa;
            }
            set
            {
                this._avulsa = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public TNFeInfNFeDest dest
        {
            get
            {
                return this._dest;
            }
            set
            {
                this._dest = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public TLocal retirada
        {
            get
            {
                return this._retirada;
            }
            set
            {
                this._retirada = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public TLocal entrega
        {
            get
            {
                return this._entrega;
            }
            set
            {
                this._entrega = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("det", Order=6)]
        public List<TNFeInfNFeDet> det
        {
            get
            {
                return this._det;
            }
            set
            {
                this._det = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public TNFeInfNFeTotal total
        {
            get
            {
                return this._total;
            }
            set
            {
                this._total = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public TNFeInfNFeTransp transp
        {
            get
            {
                return this._transp;
            }
            set
            {
                this._transp = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public TNFeInfNFeCobr cobr
        {
            get
            {
                return this._cobr;
            }
            set
            {
                this._cobr = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public TNFeInfNFeInfAdic infAdic
        {
            get
            {
                return this._infAdic;
            }
            set
            {
                this._infAdic = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public TNFeInfNFeExporta exporta
        {
            get
            {
                return this._exporta;
            }
            set
            {
                this._exporta = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public TNFeInfNFeCompra compra
        {
            get
            {
                return this._compra;
            }
            set
            {
                this._compra = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public TNFeInfNFeCana cana
        {
            get
            {
                return this._cana;
            }
            set
            {
                this._cana = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string versao
        {
            get
            {
                return this._versao;
            }
            set
            {
                this._versao = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="ID")]
        public string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFe));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFe object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFe object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFe obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFe);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFe obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFe Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFe)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFe Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFe)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFe object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFe object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFe obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFe);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFe obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFe LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeIde
    {
        
        private TCodUfIBGE _cUF;
        
        private string _cNF;
        
        private string _natOp;
        
        private TNFeInfNFeIdeIndPag _indPag;
        
        private TMod _mod;
        
        private string _serie;
        
        private string _nNF;
        
        private string _dEmi;
        
        private string _dSaiEnt;
        
        private string _hSaiEnt;
        
        private TNFeInfNFeIdeTpNF _tpNF;
        
        private string _cMunFG;
        
        private List<TNFeInfNFeIdeNFref> _nFref;
        
        private TNFeInfNFeIdeTpImp _tpImp;
        
        private TNFeInfNFeIdeTpEmis _tpEmis;
        
        private string _cDV;
        
        private TAmb _tpAmb;
        
        private TFinNFe _finNFe;
        
        private TProcEmi _procEmi;
        
        private string _verProc;
        
        private string _dhCont;
        
        private string _xJust;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TCodUfIBGE cUF
        {
            get
            {
                return this._cUF;
            }
            set
            {
                this._cUF = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string cNF
        {
            get
            {
                return this._cNF;
            }
            set
            {
                this._cNF = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string natOp
        {
            get
            {
                return this._natOp;
            }
            set
            {
                this._natOp = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public TNFeInfNFeIdeIndPag indPag
        {
            get
            {
                return this._indPag;
            }
            set
            {
                this._indPag = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public TMod mod
        {
            get
            {
                return this._mod;
            }
            set
            {
                this._mod = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string serie
        {
            get
            {
                return this._serie;
            }
            set
            {
                this._serie = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string nNF
        {
            get
            {
                return this._nNF;
            }
            set
            {
                this._nNF = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string dEmi
        {
            get
            {
                return this._dEmi;
            }
            set
            {
                this._dEmi = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string dSaiEnt
        {
            get
            {
                return this._dSaiEnt;
            }
            set
            {
                this._dSaiEnt = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string hSaiEnt
        {
            get
            {
                return this._hSaiEnt;
            }
            set
            {
                this._hSaiEnt = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public TNFeInfNFeIdeTpNF tpNF
        {
            get
            {
                return this._tpNF;
            }
            set
            {
                this._tpNF = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string cMunFG
        {
            get
            {
                return this._cMunFG;
            }
            set
            {
                this._cMunFG = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("NFref", Order=12)]
        public List<TNFeInfNFeIdeNFref> NFref
        {
            get
            {
                return this._nFref;
            }
            set
            {
                this._nFref = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public TNFeInfNFeIdeTpImp tpImp
        {
            get
            {
                return this._tpImp;
            }
            set
            {
                this._tpImp = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public TNFeInfNFeIdeTpEmis tpEmis
        {
            get
            {
                return this._tpEmis;
            }
            set
            {
                this._tpEmis = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=15)]
        public string cDV
        {
            get
            {
                return this._cDV;
            }
            set
            {
                this._cDV = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=16)]
        public TAmb tpAmb
        {
            get
            {
                return this._tpAmb;
            }
            set
            {
                this._tpAmb = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=17)]
        public TFinNFe finNFe
        {
            get
            {
                return this._finNFe;
            }
            set
            {
                this._finNFe = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=18)]
        public TProcEmi procEmi
        {
            get
            {
                return this._procEmi;
            }
            set
            {
                this._procEmi = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=19)]
        public string verProc
        {
            get
            {
                return this._verProc;
            }
            set
            {
                this._verProc = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=20)]
        public string dhCont
        {
            get
            {
                return this._dhCont;
            }
            set
            {
                this._dhCont = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=21)]
        public string xJust
        {
            get
            {
                return this._xJust;
            }
            set
            {
                this._xJust = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeIde));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeIde object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeIde object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIde object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeIde obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIde);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeIde obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeIde Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeIde)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeIde Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeIde)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeIde object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeIde object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIde object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeIde obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIde);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeIde obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeIde LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TCodUfIBGE
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("11")]
        Item11,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("12")]
        Item12,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("13")]
        Item13,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("14")]
        Item14,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("15")]
        Item15,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("16")]
        Item16,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("17")]
        Item17,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("21")]
        Item21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("22")]
        Item22,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("23")]
        Item23,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("24")]
        Item24,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("25")]
        Item25,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("26")]
        Item26,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("27")]
        Item27,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("28")]
        Item28,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("29")]
        Item29,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("31")]
        Item31,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("32")]
        Item32,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("33")]
        Item33,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("35")]
        Item35,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("41")]
        Item41,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("42")]
        Item42,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("43")]
        Item43,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("50")]
        Item50,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("51")]
        Item51,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("52")]
        Item52,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("53")]
        Item53,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeIdeIndPag
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TMod
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("55")]
        Item55,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeIdeTpNF
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeIdeNFref
    {
        
        private object _item;
        
        private ItemChoiceType1 _itemElementName;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("refCTe", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("refECF", typeof(TNFeInfNFeIdeNFrefRefECF), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("refNF", typeof(TNFeInfNFeIdeNFrefRefNF), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("refNFP", typeof(TNFeInfNFeIdeNFrefRefNFP), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("refNFe", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public object Item
        {
            get
            {
                return this._item;
            }
            set
            {
                this._item = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType1 ItemElementName
        {
            get
            {
                return this._itemElementName;
            }
            set
            {
                this._itemElementName = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeIdeNFref));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeIdeNFref object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeIdeNFref object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIdeNFref object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeIdeNFref obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIdeNFref);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeIdeNFref obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeIdeNFref Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeIdeNFref)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeIdeNFref Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeIdeNFref)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeIdeNFref object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeIdeNFref object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIdeNFref object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeIdeNFref obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIdeNFref);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeIdeNFref obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeIdeNFref LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeIdeNFrefRefECF
    {
        
        private TNFeInfNFeIdeNFrefRefECFMod _mod;
        
        private string _nECF;
        
        private string _nCOO;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TNFeInfNFeIdeNFrefRefECFMod mod
        {
            get
            {
                return this._mod;
            }
            set
            {
                this._mod = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string nECF
        {
            get
            {
                return this._nECF;
            }
            set
            {
                this._nECF = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string nCOO
        {
            get
            {
                return this._nCOO;
            }
            set
            {
                this._nCOO = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeIdeNFrefRefECF));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeIdeNFrefRefECF object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeIdeNFrefRefECF object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIdeNFrefRefECF object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeIdeNFrefRefECF obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIdeNFrefRefECF);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeIdeNFrefRefECF obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeIdeNFrefRefECF Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeIdeNFrefRefECF)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeIdeNFrefRefECF Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeIdeNFrefRefECF)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeIdeNFrefRefECF object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeIdeNFrefRefECF object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIdeNFrefRefECF object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeIdeNFrefRefECF obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIdeNFrefRefECF);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeIdeNFrefRefECF obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeIdeNFrefRefECF LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeIdeNFrefRefECFMod
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2B")]
        Item2B,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2C")]
        Item2C,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2D")]
        Item2D,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TProtNFe
    {
        
        private TProtNFeInfProt _infProt;
        
        private SignatureType _signature;
        
        private string _versao;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TProtNFeInfProt infProt
        {
            get
            {
                return this._infProt;
            }
            set
            {
                this._infProt = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://www.w3.org/2000/09/xmldsig#", Order=1)]
        public SignatureType Signature
        {
            get
            {
                return this._signature;
            }
            set
            {
                this._signature = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string versao
        {
            get
            {
                return this._versao;
            }
            set
            {
                this._versao = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TProtNFe));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TProtNFe object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TProtNFe object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TProtNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TProtNFe obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TProtNFe);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TProtNFe obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TProtNFe Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TProtNFe)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TProtNFe Deserialize(System.IO.Stream s)
        {
            return ((TProtNFe)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TProtNFe object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TProtNFe object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TProtNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TProtNFe obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TProtNFe);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TProtNFe obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TProtNFe LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TProtNFeInfProt
    {
        
        private TAmb _tpAmb;
        
        private string _verAplic;
        
        private string _chNFe;
        
        private System.DateTime _dhRecbto;
        
        private string _nProt;
        
        private byte[] _digVal;
        
        private string _cStat;
        
        private string _xMotivo;
        
        private string _id;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TAmb tpAmb
        {
            get
            {
                return this._tpAmb;
            }
            set
            {
                this._tpAmb = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string verAplic
        {
            get
            {
                return this._verAplic;
            }
            set
            {
                this._verAplic = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string chNFe
        {
            get
            {
                return this._chNFe;
            }
            set
            {
                this._chNFe = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime dhRecbto
        {
            get
            {
                return this._dhRecbto;
            }
            set
            {
                this._dhRecbto = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string nProt
        {
            get
            {
                return this._nProt;
            }
            set
            {
                this._nProt = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", Order=5)]
        public byte[] digVal
        {
            get
            {
                return this._digVal;
            }
            set
            {
                this._digVal = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string cStat
        {
            get
            {
                return this._cStat;
            }
            set
            {
                this._cStat = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string xMotivo
        {
            get
            {
                return this._xMotivo;
            }
            set
            {
                this._xMotivo = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="ID")]
        public string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TProtNFeInfProt));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TProtNFeInfProt object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TProtNFeInfProt object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TProtNFeInfProt object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TProtNFeInfProt obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TProtNFeInfProt);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TProtNFeInfProt obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TProtNFeInfProt Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TProtNFeInfProt)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TProtNFeInfProt Deserialize(System.IO.Stream s)
        {
            return ((TProtNFeInfProt)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TProtNFeInfProt object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TProtNFeInfProt object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TProtNFeInfProt object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TProtNFeInfProt obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TProtNFeInfProt);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TProtNFeInfProt obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TProtNFeInfProt LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TAmb
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.w3.org/2000/09/xmldsig#")]
    public partial class SignatureType
    {
        
        private SignedInfoType _signedInfo;
        
        private SignatureValueType _signatureValue;
        
        private KeyInfoType _keyInfo;
        
        private string _id;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SignedInfoType SignedInfo
        {
            get
            {
                return this._signedInfo;
            }
            set
            {
                this._signedInfo = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public SignatureValueType SignatureValue
        {
            get
            {
                return this._signatureValue;
            }
            set
            {
                this._signatureValue = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public KeyInfoType KeyInfo
        {
            get
            {
                return this._keyInfo;
            }
            set
            {
                this._keyInfo = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="ID")]
        public string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SignatureType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SignatureType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SignatureType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SignatureType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SignatureType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SignatureType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out SignatureType obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static SignatureType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SignatureType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static SignatureType Deserialize(System.IO.Stream s)
        {
            return ((SignatureType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current SignatureType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SignatureType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SignatureType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SignatureType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SignatureType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SignatureType obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SignatureType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.w3.org/2000/09/xmldsig#")]
    public partial class SignedInfoType
    {
        
        private SignedInfoTypeCanonicalizationMethod _canonicalizationMethod;
        
        private SignedInfoTypeSignatureMethod _signatureMethod;
        
        private ReferenceType _reference;
        
        private string _id;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SignedInfoTypeCanonicalizationMethod CanonicalizationMethod
        {
            get
            {
                return this._canonicalizationMethod;
            }
            set
            {
                this._canonicalizationMethod = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public SignedInfoTypeSignatureMethod SignatureMethod
        {
            get
            {
                return this._signatureMethod;
            }
            set
            {
                this._signatureMethod = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ReferenceType Reference
        {
            get
            {
                return this._reference;
            }
            set
            {
                this._reference = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="ID")]
        public string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SignedInfoType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SignedInfoType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SignedInfoType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SignedInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SignedInfoType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SignedInfoType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out SignedInfoType obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static SignedInfoType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SignedInfoType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static SignedInfoType Deserialize(System.IO.Stream s)
        {
            return ((SignedInfoType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current SignedInfoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SignedInfoType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SignedInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SignedInfoType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SignedInfoType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SignedInfoType obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SignedInfoType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.w3.org/2000/09/xmldsig#")]
    public partial class SignedInfoTypeCanonicalizationMethod
    {
        
        private string _algorithm;
        
        private static XmlSerializer serializer;
        
        public SignedInfoTypeCanonicalizationMethod()
        {
            this._algorithm = "http://www.w3.org/TR/2001/REC-xml-c14n-20010315";
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        public string Algorithm
        {
            get
            {
                return this._algorithm;
            }
            set
            {
                this._algorithm = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SignedInfoTypeCanonicalizationMethod));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SignedInfoTypeCanonicalizationMethod object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SignedInfoTypeCanonicalizationMethod object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SignedInfoTypeCanonicalizationMethod object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SignedInfoTypeCanonicalizationMethod obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SignedInfoTypeCanonicalizationMethod);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out SignedInfoTypeCanonicalizationMethod obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static SignedInfoTypeCanonicalizationMethod Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SignedInfoTypeCanonicalizationMethod)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static SignedInfoTypeCanonicalizationMethod Deserialize(System.IO.Stream s)
        {
            return ((SignedInfoTypeCanonicalizationMethod)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current SignedInfoTypeCanonicalizationMethod object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SignedInfoTypeCanonicalizationMethod object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SignedInfoTypeCanonicalizationMethod object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SignedInfoTypeCanonicalizationMethod obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SignedInfoTypeCanonicalizationMethod);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SignedInfoTypeCanonicalizationMethod obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SignedInfoTypeCanonicalizationMethod LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.w3.org/2000/09/xmldsig#")]
    public partial class SignedInfoTypeSignatureMethod
    {
        
        private string _algorithm;
        
        private static XmlSerializer serializer;
        
        public SignedInfoTypeSignatureMethod()
        {
            this._algorithm = "http://www.w3.org/2000/09/xmldsig#rsa-sha1";
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        public string Algorithm
        {
            get
            {
                return this._algorithm;
            }
            set
            {
                this._algorithm = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SignedInfoTypeSignatureMethod));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SignedInfoTypeSignatureMethod object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SignedInfoTypeSignatureMethod object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SignedInfoTypeSignatureMethod object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SignedInfoTypeSignatureMethod obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SignedInfoTypeSignatureMethod);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out SignedInfoTypeSignatureMethod obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static SignedInfoTypeSignatureMethod Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SignedInfoTypeSignatureMethod)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static SignedInfoTypeSignatureMethod Deserialize(System.IO.Stream s)
        {
            return ((SignedInfoTypeSignatureMethod)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current SignedInfoTypeSignatureMethod object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SignedInfoTypeSignatureMethod object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SignedInfoTypeSignatureMethod object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SignedInfoTypeSignatureMethod obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SignedInfoTypeSignatureMethod);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SignedInfoTypeSignatureMethod obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SignedInfoTypeSignatureMethod LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.w3.org/2000/09/xmldsig#")]
    public partial class ReferenceType
    {
        
        private List<TransformType> _transforms;
        
        private ReferenceTypeDigestMethod _digestMethod;
        
        private byte[] _digestValue;
        
        private string _id;
        
        private string _uRI;
        
        private string _type;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Transform", IsNullable=false)]
        public List<TransformType> Transforms
        {
            get
            {
                return this._transforms;
            }
            set
            {
                this._transforms = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ReferenceTypeDigestMethod DigestMethod
        {
            get
            {
                return this._digestMethod;
            }
            set
            {
                this._digestMethod = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", Order=2)]
        public byte[] DigestValue
        {
            get
            {
                return this._digestValue;
            }
            set
            {
                this._digestValue = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="ID")]
        public string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        public string URI
        {
            get
            {
                return this._uRI;
            }
            set
            {
                this._uRI = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ReferenceType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ReferenceType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ReferenceType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ReferenceType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ReferenceType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ReferenceType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out ReferenceType obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static ReferenceType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ReferenceType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static ReferenceType Deserialize(System.IO.Stream s)
        {
            return ((ReferenceType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current ReferenceType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ReferenceType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ReferenceType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ReferenceType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ReferenceType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ReferenceType obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ReferenceType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.w3.org/2000/09/xmldsig#")]
    public partial class TransformType
    {
        
        private List<string> _xPath;
        
        private TTransformURI _algorithm;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("XPath", Order=0)]
        public List<string> XPath
        {
            get
            {
                return this._xPath;
            }
            set
            {
                this._xPath = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public TTransformURI Algorithm
        {
            get
            {
                return this._algorithm;
            }
            set
            {
                this._algorithm = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TransformType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TransformType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TransformType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TransformType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TransformType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TransformType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TransformType obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TransformType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TransformType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TransformType Deserialize(System.IO.Stream s)
        {
            return ((TransformType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TransformType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TransformType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TransformType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TransformType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TransformType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TransformType obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TransformType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.w3.org/2000/09/xmldsig#")]
    public enum TTransformURI
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://www.w3.org/2000/09/xmldsig#enveloped-signature")]
        httpwwww3org200009xmldsigenvelopedsignature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://www.w3.org/TR/2001/REC-xml-c14n-20010315")]
        httpwwww3orgTR2001RECxmlc14n20010315,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.w3.org/2000/09/xmldsig#")]
    public partial class ReferenceTypeDigestMethod
    {
        
        private string _algorithm;
        
        private static XmlSerializer serializer;
        
        public ReferenceTypeDigestMethod()
        {
            this._algorithm = "http://www.w3.org/2000/09/xmldsig#sha1";
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        public string Algorithm
        {
            get
            {
                return this._algorithm;
            }
            set
            {
                this._algorithm = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ReferenceTypeDigestMethod));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ReferenceTypeDigestMethod object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ReferenceTypeDigestMethod object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ReferenceTypeDigestMethod object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ReferenceTypeDigestMethod obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ReferenceTypeDigestMethod);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out ReferenceTypeDigestMethod obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static ReferenceTypeDigestMethod Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ReferenceTypeDigestMethod)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static ReferenceTypeDigestMethod Deserialize(System.IO.Stream s)
        {
            return ((ReferenceTypeDigestMethod)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current ReferenceTypeDigestMethod object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ReferenceTypeDigestMethod object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ReferenceTypeDigestMethod object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ReferenceTypeDigestMethod obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ReferenceTypeDigestMethod);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ReferenceTypeDigestMethod obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ReferenceTypeDigestMethod LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.w3.org/2000/09/xmldsig#")]
    public partial class SignatureValueType
    {
        
        private string _id;
        
        private byte[] _value;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="ID")]
        public string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute(DataType="base64Binary")]
        public byte[] Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SignatureValueType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SignatureValueType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SignatureValueType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SignatureValueType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SignatureValueType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SignatureValueType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out SignatureValueType obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static SignatureValueType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SignatureValueType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static SignatureValueType Deserialize(System.IO.Stream s)
        {
            return ((SignatureValueType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current SignatureValueType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SignatureValueType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SignatureValueType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SignatureValueType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SignatureValueType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SignatureValueType obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SignatureValueType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.w3.org/2000/09/xmldsig#")]
    public partial class KeyInfoType
    {
        
        private X509DataType _x509Data;
        
        private string _id;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public X509DataType X509Data
        {
            get
            {
                return this._x509Data;
            }
            set
            {
                this._x509Data = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="ID")]
        public string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(KeyInfoType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current KeyInfoType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an KeyInfoType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output KeyInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out KeyInfoType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(KeyInfoType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out KeyInfoType obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static KeyInfoType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((KeyInfoType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static KeyInfoType Deserialize(System.IO.Stream s)
        {
            return ((KeyInfoType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current KeyInfoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an KeyInfoType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output KeyInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out KeyInfoType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(KeyInfoType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out KeyInfoType obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static KeyInfoType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.w3.org/2000/09/xmldsig#")]
    public partial class X509DataType
    {
        
        private byte[] _x509Certificate;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", Order=0)]
        public byte[] X509Certificate
        {
            get
            {
                return this._x509Certificate;
            }
            set
            {
                this._x509Certificate = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(X509DataType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current X509DataType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an X509DataType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output X509DataType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out X509DataType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(X509DataType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out X509DataType obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static X509DataType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((X509DataType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static X509DataType Deserialize(System.IO.Stream s)
        {
            return ((X509DataType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current X509DataType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an X509DataType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output X509DataType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out X509DataType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(X509DataType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out X509DataType obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static X509DataType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TVeiculo
    {
        
        private string _placa;
        
        private TUf _uf;
        
        private string _rNTC;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string placa
        {
            get
            {
                return this._placa;
            }
            set
            {
                this._placa = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public TUf UF
        {
            get
            {
                return this._uf;
            }
            set
            {
                this._uf = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string RNTC
        {
            get
            {
                return this._rNTC;
            }
            set
            {
                this._rNTC = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TVeiculo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TVeiculo object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TVeiculo object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TVeiculo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TVeiculo obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TVeiculo);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TVeiculo obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TVeiculo Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TVeiculo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TVeiculo Deserialize(System.IO.Stream s)
        {
            return ((TVeiculo)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TVeiculo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TVeiculo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TVeiculo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TVeiculo obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TVeiculo);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TVeiculo obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TVeiculo LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TUf
    {
        
        /// <remarks/>
        AC,
        
        /// <remarks/>
        AL,
        
        /// <remarks/>
        AM,
        
        /// <remarks/>
        AP,
        
        /// <remarks/>
        BA,
        
        /// <remarks/>
        CE,
        
        /// <remarks/>
        DF,
        
        /// <remarks/>
        ES,
        
        /// <remarks/>
        GO,
        
        /// <remarks/>
        MA,
        
        /// <remarks/>
        MG,
        
        /// <remarks/>
        MS,
        
        /// <remarks/>
        MT,
        
        /// <remarks/>
        PA,
        
        /// <remarks/>
        PB,
        
        /// <remarks/>
        PE,
        
        /// <remarks/>
        PI,
        
        /// <remarks/>
        PR,
        
        /// <remarks/>
        RJ,
        
        /// <remarks/>
        RN,
        
        /// <remarks/>
        RO,
        
        /// <remarks/>
        RR,
        
        /// <remarks/>
        RS,
        
        /// <remarks/>
        SC,
        
        /// <remarks/>
        SE,
        
        /// <remarks/>
        SP,
        
        /// <remarks/>
        TO,
        
        /// <remarks/>
        EX,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TLocal
    {
        
        private string _item;
        
        private ItemChoiceType4 _itemElementName;
        
        private string _xLgr;
        
        private string _nro;
        
        private string _xCpl;
        
        private string _xBairro;
        
        private string _cMun;
        
        private string _xMun;
        
        private TUf _uf;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("CNPJ", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("CPF", Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item
        {
            get
            {
                return this._item;
            }
            set
            {
                this._item = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType4 ItemElementName
        {
            get
            {
                return this._itemElementName;
            }
            set
            {
                this._itemElementName = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string xLgr
        {
            get
            {
                return this._xLgr;
            }
            set
            {
                this._xLgr = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string nro
        {
            get
            {
                return this._nro;
            }
            set
            {
                this._nro = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string xCpl
        {
            get
            {
                return this._xCpl;
            }
            set
            {
                this._xCpl = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string xBairro
        {
            get
            {
                return this._xBairro;
            }
            set
            {
                this._xBairro = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string cMun
        {
            get
            {
                return this._cMun;
            }
            set
            {
                this._cMun = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string xMun
        {
            get
            {
                return this._xMun;
            }
            set
            {
                this._xMun = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public TUf UF
        {
            get
            {
                return this._uf;
            }
            set
            {
                this._uf = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TLocal));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TLocal object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TLocal object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TLocal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TLocal obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TLocal);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TLocal obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TLocal Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TLocal)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TLocal Deserialize(System.IO.Stream s)
        {
            return ((TLocal)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TLocal object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TLocal object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TLocal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TLocal obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TLocal);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TLocal obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TLocal LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe", IncludeInSchema=false)]
    public enum ItemChoiceType4
    {
        
        /// <remarks/>
        CNPJ,
        
        /// <remarks/>
        CPF,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TEndereco
    {
        
        private string _xLgr;
        
        private string _nro;
        
        private string _xCpl;
        
        private string _xBairro;
        
        private string _cMun;
        
        private string _xMun;
        
        private TUf _uf;
        
        private string _cEP;
        
        private System.Nullable<Tpais> _cPais;
        
        private string _xPais;
        
        private string _fone;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string xLgr
        {
            get
            {
                return this._xLgr;
            }
            set
            {
                this._xLgr = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string nro
        {
            get
            {
                return this._nro;
            }
            set
            {
                this._nro = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string xCpl
        {
            get
            {
                return this._xCpl;
            }
            set
            {
                this._xCpl = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string xBairro
        {
            get
            {
                return this._xBairro;
            }
            set
            {
                this._xBairro = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string cMun
        {
            get
            {
                return this._cMun;
            }
            set
            {
                this._cMun = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string xMun
        {
            get
            {
                return this._xMun;
            }
            set
            {
                this._xMun = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public TUf UF
        {
            get
            {
                return this._uf;
            }
            set
            {
                this._uf = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string CEP
        {
            get
            {
                return this._cEP;
            }
            set
            {
                this._cEP = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public Tpais cPais
        {
            get
            {
                if (this._cPais.HasValue)
                {
                    return this._cPais.Value;
                }
                else
                {
                    return default(Tpais);
                }
            }
            set
            {
                this._cPais = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool cPaisSpecified
        {
            get
            {
                return this._cPais.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._cPais = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string xPais
        {
            get
            {
                return this._xPais;
            }
            set
            {
                this._xPais = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string fone
        {
            get
            {
                return this._fone;
            }
            set
            {
                this._fone = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TEndereco));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TEndereco object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TEndereco object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TEndereco object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TEndereco obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TEndereco);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TEndereco obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TEndereco Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TEndereco)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TEndereco Deserialize(System.IO.Stream s)
        {
            return ((TEndereco)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TEndereco object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TEndereco object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TEndereco object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TEndereco obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TEndereco);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TEndereco obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TEndereco LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum Tpais
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("132")]
        Item132,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("175")]
        Item175,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("230")]
        Item230,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("310")]
        Item310,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("370")]
        Item370,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("400")]
        Item400,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("418")]
        Item418,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("434")]
        Item434,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("477")]
        Item477,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("531")]
        Item531,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("590")]
        Item590,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("639")]
        Item639,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("647")]
        Item647,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("655")]
        Item655,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("698")]
        Item698,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("728")]
        Item728,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("736")]
        Item736,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("779")]
        Item779,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("809")]
        Item809,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("817")]
        Item817,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("833")]
        Item833,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("850")]
        Item850,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("876")]
        Item876,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("884")]
        Item884,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("906")]
        Item906,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("930")]
        Item930,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("973")]
        Item973,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("981")]
        Item981,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0132")]
        Item0132,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0175")]
        Item0175,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0230")]
        Item0230,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0310")]
        Item0310,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0370")]
        Item0370,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0400")]
        Item0400,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0418")]
        Item0418,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0434")]
        Item0434,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0477")]
        Item0477,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0531")]
        Item0531,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0590")]
        Item0590,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0639")]
        Item0639,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0647")]
        Item0647,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0655")]
        Item0655,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0698")]
        Item0698,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0728")]
        Item0728,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0736")]
        Item0736,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0779")]
        Item0779,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0809")]
        Item0809,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0817")]
        Item0817,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0833")]
        Item0833,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0850")]
        Item0850,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0876")]
        Item0876,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0884")]
        Item0884,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0906")]
        Item0906,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0930")]
        Item0930,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0973")]
        Item0973,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0981")]
        Item0981,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1015")]
        Item1015,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1058")]
        Item1058,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1082")]
        Item1082,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1112")]
        Item1112,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1155")]
        Item1155,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1198")]
        Item1198,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1279")]
        Item1279,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1376")]
        Item1376,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1414")]
        Item1414,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1457")]
        Item1457,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1490")]
        Item1490,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1504")]
        Item1504,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1508")]
        Item1508,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1511")]
        Item1511,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1538")]
        Item1538,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1546")]
        Item1546,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1589")]
        Item1589,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1600")]
        Item1600,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1619")]
        Item1619,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1635")]
        Item1635,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1651")]
        Item1651,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1694")]
        Item1694,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1732")]
        Item1732,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1775")]
        Item1775,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1830")]
        Item1830,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1872")]
        Item1872,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1902")]
        Item1902,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1937")]
        Item1937,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1953")]
        Item1953,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1961")]
        Item1961,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1988")]
        Item1988,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1996")]
        Item1996,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2291")]
        Item2291,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2321")]
        Item2321,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2356")]
        Item2356,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2399")]
        Item2399,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2402")]
        Item2402,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2437")]
        Item2437,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2445")]
        Item2445,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2453")]
        Item2453,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2461")]
        Item2461,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2470")]
        Item2470,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2496")]
        Item2496,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2518")]
        Item2518,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2534")]
        Item2534,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2550")]
        Item2550,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2593")]
        Item2593,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2674")]
        Item2674,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2712")]
        Item2712,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2755")]
        Item2755,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2810")]
        Item2810,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2852")]
        Item2852,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2895")]
        Item2895,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2917")]
        Item2917,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2933")]
        Item2933,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2976")]
        Item2976,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3018")]
        Item3018,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3050")]
        Item3050,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3093")]
        Item3093,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3131")]
        Item3131,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3174")]
        Item3174,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3255")]
        Item3255,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3298")]
        Item3298,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3310")]
        Item3310,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3344")]
        Item3344,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3379")]
        Item3379,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3417")]
        Item3417,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3450")]
        Item3450,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3514")]
        Item3514,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3557")]
        Item3557,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3573")]
        Item3573,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3595")]
        Item3595,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3611")]
        Item3611,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3654")]
        Item3654,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3697")]
        Item3697,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3727")]
        Item3727,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3751")]
        Item3751,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3794")]
        Item3794,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3832")]
        Item3832,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3867")]
        Item3867,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3913")]
        Item3913,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3964")]
        Item3964,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3999")]
        Item3999,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4030")]
        Item4030,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4111")]
        Item4111,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4200")]
        Item4200,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4235")]
        Item4235,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4260")]
        Item4260,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4278")]
        Item4278,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4316")]
        Item4316,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4340")]
        Item4340,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4383")]
        Item4383,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4405")]
        Item4405,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4421")]
        Item4421,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4456")]
        Item4456,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4472")]
        Item4472,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4499")]
        Item4499,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4502")]
        Item4502,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4525")]
        Item4525,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4553")]
        Item4553,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4588")]
        Item4588,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4618")]
        Item4618,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4642")]
        Item4642,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4677")]
        Item4677,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4723")]
        Item4723,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4740")]
        Item4740,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4766")]
        Item4766,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4774")]
        Item4774,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4855")]
        Item4855,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4880")]
        Item4880,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4885")]
        Item4885,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4901")]
        Item4901,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4936")]
        Item4936,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4944")]
        Item4944,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4952")]
        Item4952,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4979")]
        Item4979,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4985")]
        Item4985,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4995")]
        Item4995,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5010")]
        Item5010,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5053")]
        Item5053,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5070")]
        Item5070,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5088")]
        Item5088,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5118")]
        Item5118,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5177")]
        Item5177,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5215")]
        Item5215,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5258")]
        Item5258,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5282")]
        Item5282,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5312")]
        Item5312,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5355")]
        Item5355,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5380")]
        Item5380,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5428")]
        Item5428,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5452")]
        Item5452,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5487")]
        Item5487,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5517")]
        Item5517,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5568")]
        Item5568,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5665")]
        Item5665,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5738")]
        Item5738,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5754")]
        Item5754,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5762")]
        Item5762,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5780")]
        Item5780,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5800")]
        Item5800,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5860")]
        Item5860,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5894")]
        Item5894,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5932")]
        Item5932,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5991")]
        Item5991,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6033")]
        Item6033,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6076")]
        Item6076,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6114")]
        Item6114,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6238")]
        Item6238,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6254")]
        Item6254,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6289")]
        Item6289,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6408")]
        Item6408,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6475")]
        Item6475,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6602")]
        Item6602,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6653")]
        Item6653,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6700")]
        Item6700,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6750")]
        Item6750,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6769")]
        Item6769,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6777")]
        Item6777,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6781")]
        Item6781,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6858")]
        Item6858,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6874")]
        Item6874,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6904")]
        Item6904,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6912")]
        Item6912,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6955")]
        Item6955,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6971")]
        Item6971,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7005")]
        Item7005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7056")]
        Item7056,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7102")]
        Item7102,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7153")]
        Item7153,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7200")]
        Item7200,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7285")]
        Item7285,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7315")]
        Item7315,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7358")]
        Item7358,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7370")]
        Item7370,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7412")]
        Item7412,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7447")]
        Item7447,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7480")]
        Item7480,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7501")]
        Item7501,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7544")]
        Item7544,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7560")]
        Item7560,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7595")]
        Item7595,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7600")]
        Item7600,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7641")]
        Item7641,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7676")]
        Item7676,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7706")]
        Item7706,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7722")]
        Item7722,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7765")]
        Item7765,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7803")]
        Item7803,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7820")]
        Item7820,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7838")]
        Item7838,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7889")]
        Item7889,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7919")]
        Item7919,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7951")]
        Item7951,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8001")]
        Item8001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8052")]
        Item8052,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8109")]
        Item8109,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8150")]
        Item8150,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8206")]
        Item8206,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8230")]
        Item8230,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8249")]
        Item8249,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8273")]
        Item8273,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8281")]
        Item8281,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8311")]
        Item8311,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8338")]
        Item8338,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8451")]
        Item8451,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8478")]
        Item8478,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8486")]
        Item8486,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8508")]
        Item8508,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8583")]
        Item8583,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8630")]
        Item8630,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8664")]
        Item8664,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8702")]
        Item8702,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8737")]
        Item8737,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8885")]
        Item8885,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8907")]
        Item8907,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8958")]
        Item8958,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("9903")]
        Item9903,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("9946")]
        Item9946,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("9950")]
        Item9950,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("9970")]
        Item9970,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TEnderEmi
    {
        
        private string _xLgr;
        
        private string _nro;
        
        private string _xCpl;
        
        private string _xBairro;
        
        private string _cMun;
        
        private string _xMun;
        
        private TUfEmi _uf;
        
        private string _cEP;
        
        private System.Nullable<TEnderEmiCPais> _cPais;
        
        private System.Nullable<TEnderEmiXPais> _xPais;
        
        private string _fone;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string xLgr
        {
            get
            {
                return this._xLgr;
            }
            set
            {
                this._xLgr = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string nro
        {
            get
            {
                return this._nro;
            }
            set
            {
                this._nro = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string xCpl
        {
            get
            {
                return this._xCpl;
            }
            set
            {
                this._xCpl = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string xBairro
        {
            get
            {
                return this._xBairro;
            }
            set
            {
                this._xBairro = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string cMun
        {
            get
            {
                return this._cMun;
            }
            set
            {
                this._cMun = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string xMun
        {
            get
            {
                return this._xMun;
            }
            set
            {
                this._xMun = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public TUfEmi UF
        {
            get
            {
                return this._uf;
            }
            set
            {
                this._uf = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string CEP
        {
            get
            {
                return this._cEP;
            }
            set
            {
                this._cEP = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public TEnderEmiCPais cPais
        {
            get
            {
                if (this._cPais.HasValue)
                {
                    return this._cPais.Value;
                }
                else
                {
                    return default(TEnderEmiCPais);
                }
            }
            set
            {
                this._cPais = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool cPaisSpecified
        {
            get
            {
                return this._cPais.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._cPais = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public TEnderEmiXPais xPais
        {
            get
            {
                if (this._xPais.HasValue)
                {
                    return this._xPais.Value;
                }
                else
                {
                    return default(TEnderEmiXPais);
                }
            }
            set
            {
                this._xPais = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool xPaisSpecified
        {
            get
            {
                return this._xPais.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._xPais = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string fone
        {
            get
            {
                return this._fone;
            }
            set
            {
                this._fone = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TEnderEmi));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TEnderEmi object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TEnderEmi object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TEnderEmi object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TEnderEmi obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TEnderEmi);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TEnderEmi obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TEnderEmi Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TEnderEmi)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TEnderEmi Deserialize(System.IO.Stream s)
        {
            return ((TEnderEmi)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TEnderEmi object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TEnderEmi object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TEnderEmi object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TEnderEmi obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TEnderEmi);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TEnderEmi obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TEnderEmi LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TUfEmi
    {
        
        /// <remarks/>
        AC,
        
        /// <remarks/>
        AL,
        
        /// <remarks/>
        AM,
        
        /// <remarks/>
        AP,
        
        /// <remarks/>
        BA,
        
        /// <remarks/>
        CE,
        
        /// <remarks/>
        DF,
        
        /// <remarks/>
        ES,
        
        /// <remarks/>
        GO,
        
        /// <remarks/>
        MA,
        
        /// <remarks/>
        MG,
        
        /// <remarks/>
        MS,
        
        /// <remarks/>
        MT,
        
        /// <remarks/>
        PA,
        
        /// <remarks/>
        PB,
        
        /// <remarks/>
        PE,
        
        /// <remarks/>
        PI,
        
        /// <remarks/>
        PR,
        
        /// <remarks/>
        RJ,
        
        /// <remarks/>
        RN,
        
        /// <remarks/>
        RO,
        
        /// <remarks/>
        RR,
        
        /// <remarks/>
        RS,
        
        /// <remarks/>
        SC,
        
        /// <remarks/>
        SE,
        
        /// <remarks/>
        SP,
        
        /// <remarks/>
        TO,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TEnderEmiCPais
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1058")]
        Item1058,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TEnderEmiXPais
    {
        
        /// <remarks/>
        Brasil,
        
        /// <remarks/>
        BRASIL,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeIdeNFrefRefNF
    {
        
        private TCodUfIBGE _cUF;
        
        private string _aAMM;
        
        private string _cNPJ;
        
        private TNFeInfNFeIdeNFrefRefNFMod _mod;
        
        private string _serie;
        
        private string _nNF;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TCodUfIBGE cUF
        {
            get
            {
                return this._cUF;
            }
            set
            {
                this._cUF = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string AAMM
        {
            get
            {
                return this._aAMM;
            }
            set
            {
                this._aAMM = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string CNPJ
        {
            get
            {
                return this._cNPJ;
            }
            set
            {
                this._cNPJ = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public TNFeInfNFeIdeNFrefRefNFMod mod
        {
            get
            {
                return this._mod;
            }
            set
            {
                this._mod = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string serie
        {
            get
            {
                return this._serie;
            }
            set
            {
                this._serie = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string nNF
        {
            get
            {
                return this._nNF;
            }
            set
            {
                this._nNF = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeIdeNFrefRefNF));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeIdeNFrefRefNF object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeIdeNFrefRefNF object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIdeNFrefRefNF object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeIdeNFrefRefNF obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIdeNFrefRefNF);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeIdeNFrefRefNF obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeIdeNFrefRefNF Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeIdeNFrefRefNF)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeIdeNFrefRefNF Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeIdeNFrefRefNF)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeIdeNFrefRefNF object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeIdeNFrefRefNF object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIdeNFrefRefNF object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeIdeNFrefRefNF obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIdeNFrefRefNF);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeIdeNFrefRefNF obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeIdeNFrefRefNF LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeIdeNFrefRefNFMod
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Item01,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeIdeNFrefRefNFP
    {
        
        private TCodUfIBGE _cUF;
        
        private string _aAMM;
        
        private string _item;
        
        private ItemChoiceType _itemElementName;
        
        private string _ie;
        
        private TNFeInfNFeIdeNFrefRefNFPMod _mod;
        
        private string _serie;
        
        private string _nNF;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TCodUfIBGE cUF
        {
            get
            {
                return this._cUF;
            }
            set
            {
                this._cUF = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string AAMM
        {
            get
            {
                return this._aAMM;
            }
            set
            {
                this._aAMM = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("CNPJ", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute("CPF", Order=2)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item
        {
            get
            {
                return this._item;
            }
            set
            {
                this._item = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType ItemElementName
        {
            get
            {
                return this._itemElementName;
            }
            set
            {
                this._itemElementName = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string IE
        {
            get
            {
                return this._ie;
            }
            set
            {
                this._ie = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public TNFeInfNFeIdeNFrefRefNFPMod mod
        {
            get
            {
                return this._mod;
            }
            set
            {
                this._mod = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string serie
        {
            get
            {
                return this._serie;
            }
            set
            {
                this._serie = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string nNF
        {
            get
            {
                return this._nNF;
            }
            set
            {
                this._nNF = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeIdeNFrefRefNFP));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeIdeNFrefRefNFP object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeIdeNFrefRefNFP object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIdeNFrefRefNFP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeIdeNFrefRefNFP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIdeNFrefRefNFP);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeIdeNFrefRefNFP obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeIdeNFrefRefNFP Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeIdeNFrefRefNFP)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeIdeNFrefRefNFP Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeIdeNFrefRefNFP)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeIdeNFrefRefNFP object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeIdeNFrefRefNFP object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIdeNFrefRefNFP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeIdeNFrefRefNFP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIdeNFrefRefNFP);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeIdeNFrefRefNFP obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeIdeNFrefRefNFP LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe", IncludeInSchema=false)]
    public enum ItemChoiceType
    {
        
        /// <remarks/>
        CNPJ,
        
        /// <remarks/>
        CPF,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeIdeNFrefRefNFPMod
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Item01,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        Item04,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe", IncludeInSchema=false)]
    public enum ItemChoiceType1
    {
        
        /// <remarks/>
        refCTe,
        
        /// <remarks/>
        refECF,
        
        /// <remarks/>
        refNF,
        
        /// <remarks/>
        refNFP,
        
        /// <remarks/>
        refNFe,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeIdeTpImp
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeIdeTpEmis
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        Item6,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        Item7,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TFinNFe
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TProcEmi
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeEmit
    {
        
        private string _item;
        
        private ItemChoiceType2 _itemElementName;
        
        private string _xNome;
        
        private string _xFant;
        
        private TEnderEmi _enderEmit;
        
        private string _ie;
        
        private string _iEST;
        
        private string _im;
        
        private string _cNAE;
        
        private TNFeInfNFeEmitCRT _cRT;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("CNPJ", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("CPF", Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item
        {
            get
            {
                return this._item;
            }
            set
            {
                this._item = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType2 ItemElementName
        {
            get
            {
                return this._itemElementName;
            }
            set
            {
                this._itemElementName = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string xNome
        {
            get
            {
                return this._xNome;
            }
            set
            {
                this._xNome = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string xFant
        {
            get
            {
                return this._xFant;
            }
            set
            {
                this._xFant = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public TEnderEmi enderEmit
        {
            get
            {
                return this._enderEmit;
            }
            set
            {
                this._enderEmit = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string IE
        {
            get
            {
                return this._ie;
            }
            set
            {
                this._ie = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string IEST
        {
            get
            {
                return this._iEST;
            }
            set
            {
                this._iEST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string IM
        {
            get
            {
                return this._im;
            }
            set
            {
                this._im = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string CNAE
        {
            get
            {
                return this._cNAE;
            }
            set
            {
                this._cNAE = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public TNFeInfNFeEmitCRT CRT
        {
            get
            {
                return this._cRT;
            }
            set
            {
                this._cRT = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeEmit));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeEmit object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeEmit object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeEmit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeEmit obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeEmit);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeEmit obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeEmit Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeEmit)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeEmit Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeEmit)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeEmit object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeEmit object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeEmit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeEmit obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeEmit);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeEmit obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeEmit LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe", IncludeInSchema=false)]
    public enum ItemChoiceType2
    {
        
        /// <remarks/>
        CNPJ,
        
        /// <remarks/>
        CPF,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeEmitCRT
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeAvulsa
    {
        
        private string _cNPJ;
        
        private string _xOrgao;
        
        private string _matr;
        
        private string _xAgente;
        
        private string _fone;
        
        private TUfEmi _uf;
        
        private string _nDAR;
        
        private string _dEmi;
        
        private string _vDAR;
        
        private string _repEmi;
        
        private string _dPag;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CNPJ
        {
            get
            {
                return this._cNPJ;
            }
            set
            {
                this._cNPJ = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string xOrgao
        {
            get
            {
                return this._xOrgao;
            }
            set
            {
                this._xOrgao = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string matr
        {
            get
            {
                return this._matr;
            }
            set
            {
                this._matr = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string xAgente
        {
            get
            {
                return this._xAgente;
            }
            set
            {
                this._xAgente = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string fone
        {
            get
            {
                return this._fone;
            }
            set
            {
                this._fone = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public TUfEmi UF
        {
            get
            {
                return this._uf;
            }
            set
            {
                this._uf = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string nDAR
        {
            get
            {
                return this._nDAR;
            }
            set
            {
                this._nDAR = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string dEmi
        {
            get
            {
                return this._dEmi;
            }
            set
            {
                this._dEmi = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string vDAR
        {
            get
            {
                return this._vDAR;
            }
            set
            {
                this._vDAR = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string repEmi
        {
            get
            {
                return this._repEmi;
            }
            set
            {
                this._repEmi = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string dPag
        {
            get
            {
                return this._dPag;
            }
            set
            {
                this._dPag = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeAvulsa));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeAvulsa object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeAvulsa object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeAvulsa object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeAvulsa obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeAvulsa);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeAvulsa obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeAvulsa Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeAvulsa)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeAvulsa Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeAvulsa)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeAvulsa object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeAvulsa object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeAvulsa object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeAvulsa obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeAvulsa);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeAvulsa obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeAvulsa LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDest
    {
        
        private string _item;
        
        private ItemChoiceType3 _itemElementName;
        
        private string _xNome;
        
        private TEndereco _enderDest;
        
        private string _ie;
        
        private string _iSUF;
        
        private string _email;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("CNPJ", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("CPF", Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item
        {
            get
            {
                return this._item;
            }
            set
            {
                this._item = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType3 ItemElementName
        {
            get
            {
                return this._itemElementName;
            }
            set
            {
                this._itemElementName = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string xNome
        {
            get
            {
                return this._xNome;
            }
            set
            {
                this._xNome = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public TEndereco enderDest
        {
            get
            {
                return this._enderDest;
            }
            set
            {
                this._enderDest = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string IE
        {
            get
            {
                return this._ie;
            }
            set
            {
                this._ie = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string ISUF
        {
            get
            {
                return this._iSUF;
            }
            set
            {
                this._iSUF = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string email
        {
            get
            {
                return this._email;
            }
            set
            {
                this._email = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDest));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDest object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDest object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDest obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDest);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDest obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDest Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDest Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDest)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDest obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDest);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDest obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDest LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe", IncludeInSchema=false)]
    public enum ItemChoiceType3
    {
        
        /// <remarks/>
        CNPJ,
        
        /// <remarks/>
        CPF,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDet
    {
        
        private TNFeInfNFeDetProd _prod;
        
        private TNFeInfNFeDetImposto _imposto;
        
        private string _infAdProd;
        
        private string _nItem;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TNFeInfNFeDetProd prod
        {
            get
            {
                return this._prod;
            }
            set
            {
                this._prod = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public TNFeInfNFeDetImposto imposto
        {
            get
            {
                return this._imposto;
            }
            set
            {
                this._imposto = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string infAdProd
        {
            get
            {
                return this._infAdProd;
            }
            set
            {
                this._infAdProd = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string nItem
        {
            get
            {
                return this._nItem;
            }
            set
            {
                this._nItem = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDet));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDet object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDet object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDet);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDet obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDet Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDet)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDet Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDet)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDet object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDet object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDet);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDet obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDet LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetProd
    {
        
        private string _cProd;
        
        private string _cEAN;
        
        private string _xProd;
        
        private string _nCM;
        
        private string _eXTIPI;
        
        private TCfop _cFOP;
        
        private string _uCom;
        
        private string _qCom;
        
        private string _vUnCom;
        
        private string _vProd;
        
        private string _cEANTrib;
        
        private string _uTrib;
        
        private string _qTrib;
        
        private string _vUnTrib;
        
        private string _vFrete;
        
        private string _vSeg;
        
        private string _vDesc;
        
        private string _vOutro;
        
        private TNFeInfNFeDetProdIndTot _indTot;
        
        private List<TNFeInfNFeDetProdDI> _di;
        
        private string _xPed;
        
        private string _nItemPed;
        
        private string _nFCI;
        
        private List<object> _items;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string cProd
        {
            get
            {
                return this._cProd;
            }
            set
            {
                this._cProd = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string cEAN
        {
            get
            {
                return this._cEAN;
            }
            set
            {
                this._cEAN = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string xProd
        {
            get
            {
                return this._xProd;
            }
            set
            {
                this._xProd = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string NCM
        {
            get
            {
                return this._nCM;
            }
            set
            {
                this._nCM = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string EXTIPI
        {
            get
            {
                return this._eXTIPI;
            }
            set
            {
                this._eXTIPI = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public TCfop CFOP
        {
            get
            {
                return this._cFOP;
            }
            set
            {
                this._cFOP = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string uCom
        {
            get
            {
                return this._uCom;
            }
            set
            {
                this._uCom = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string qCom
        {
            get
            {
                return this._qCom;
            }
            set
            {
                this._qCom = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string vUnCom
        {
            get
            {
                return this._vUnCom;
            }
            set
            {
                this._vUnCom = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string vProd
        {
            get
            {
                return this._vProd;
            }
            set
            {
                this._vProd = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string cEANTrib
        {
            get
            {
                return this._cEANTrib;
            }
            set
            {
                this._cEANTrib = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string uTrib
        {
            get
            {
                return this._uTrib;
            }
            set
            {
                this._uTrib = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public string qTrib
        {
            get
            {
                return this._qTrib;
            }
            set
            {
                this._qTrib = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public string vUnTrib
        {
            get
            {
                return this._vUnTrib;
            }
            set
            {
                this._vUnTrib = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public string vFrete
        {
            get
            {
                return this._vFrete;
            }
            set
            {
                this._vFrete = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=15)]
        public string vSeg
        {
            get
            {
                return this._vSeg;
            }
            set
            {
                this._vSeg = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=16)]
        public string vDesc
        {
            get
            {
                return this._vDesc;
            }
            set
            {
                this._vDesc = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=17)]
        public string vOutro
        {
            get
            {
                return this._vOutro;
            }
            set
            {
                this._vOutro = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=18)]
        public TNFeInfNFeDetProdIndTot indTot
        {
            get
            {
                return this._indTot;
            }
            set
            {
                this._indTot = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("DI", Order=19)]
        public List<TNFeInfNFeDetProdDI> DI
        {
            get
            {
                return this._di;
            }
            set
            {
                this._di = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=20)]
        public string xPed
        {
            get
            {
                return this._xPed;
            }
            set
            {
                this._xPed = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=21)]
        public string nItemPed
        {
            get
            {
                return this._nItemPed;
            }
            set
            {
                this._nItemPed = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=22)]
        public string nFCI
        {
            get
            {
                return this._nFCI;
            }
            set
            {
                this._nFCI = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("arma", typeof(TNFeInfNFeDetProdArma), Order=23)]
        [System.Xml.Serialization.XmlElementAttribute("comb", typeof(TNFeInfNFeDetProdComb), Order=23)]
        [System.Xml.Serialization.XmlElementAttribute("med", typeof(TNFeInfNFeDetProdMed), Order=23)]
        [System.Xml.Serialization.XmlElementAttribute("veicProd", typeof(TNFeInfNFeDetProdVeicProd), Order=23)]
        public List<object> Items
        {
            get
            {
                return this._items;
            }
            set
            {
                this._items = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetProd));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProd object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProd object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetProd obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProd);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetProd obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetProd Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetProd)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetProd Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetProd)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetProd object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProd object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProd obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProd);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProd obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetProd LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TCfop
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1101")]
        Item1101,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1102")]
        Item1102,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1111")]
        Item1111,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1113")]
        Item1113,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1116")]
        Item1116,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1117")]
        Item1117,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1118")]
        Item1118,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1120")]
        Item1120,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1121")]
        Item1121,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1122")]
        Item1122,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1124")]
        Item1124,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1125")]
        Item1125,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1126")]
        Item1126,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1128")]
        Item1128,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1151")]
        Item1151,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1152")]
        Item1152,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1153")]
        Item1153,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1154")]
        Item1154,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1201")]
        Item1201,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1202")]
        Item1202,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1203")]
        Item1203,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1204")]
        Item1204,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1205")]
        Item1205,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1206")]
        Item1206,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1207")]
        Item1207,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1208")]
        Item1208,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1209")]
        Item1209,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1251")]
        Item1251,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1252")]
        Item1252,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1253")]
        Item1253,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1254")]
        Item1254,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1255")]
        Item1255,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1256")]
        Item1256,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1257")]
        Item1257,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1301")]
        Item1301,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1302")]
        Item1302,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1303")]
        Item1303,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1304")]
        Item1304,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1305")]
        Item1305,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1306")]
        Item1306,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1351")]
        Item1351,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1352")]
        Item1352,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1353")]
        Item1353,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1354")]
        Item1354,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1355")]
        Item1355,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1356")]
        Item1356,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1360")]
        Item1360,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1401")]
        Item1401,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1403")]
        Item1403,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1406")]
        Item1406,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1407")]
        Item1407,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1408")]
        Item1408,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1409")]
        Item1409,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1410")]
        Item1410,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1411")]
        Item1411,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1414")]
        Item1414,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1415")]
        Item1415,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1451")]
        Item1451,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1452")]
        Item1452,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1501")]
        Item1501,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1503")]
        Item1503,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1504")]
        Item1504,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1505")]
        Item1505,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1506")]
        Item1506,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1551")]
        Item1551,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1552")]
        Item1552,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1553")]
        Item1553,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1554")]
        Item1554,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1555")]
        Item1555,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1556")]
        Item1556,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1557")]
        Item1557,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1601")]
        Item1601,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1602")]
        Item1602,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1603")]
        Item1603,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1604")]
        Item1604,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1605")]
        Item1605,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1651")]
        Item1651,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1652")]
        Item1652,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1653")]
        Item1653,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1658")]
        Item1658,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1659")]
        Item1659,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1660")]
        Item1660,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1661")]
        Item1661,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1662")]
        Item1662,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1663")]
        Item1663,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1664")]
        Item1664,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1901")]
        Item1901,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1902")]
        Item1902,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1903")]
        Item1903,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1904")]
        Item1904,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1905")]
        Item1905,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1906")]
        Item1906,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1907")]
        Item1907,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1908")]
        Item1908,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1909")]
        Item1909,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1910")]
        Item1910,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1911")]
        Item1911,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1912")]
        Item1912,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1913")]
        Item1913,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1914")]
        Item1914,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1915")]
        Item1915,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1916")]
        Item1916,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1917")]
        Item1917,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1918")]
        Item1918,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1919")]
        Item1919,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1920")]
        Item1920,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1921")]
        Item1921,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1922")]
        Item1922,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1923")]
        Item1923,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1924")]
        Item1924,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1925")]
        Item1925,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1926")]
        Item1926,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1931")]
        Item1931,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1932")]
        Item1932,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1933")]
        Item1933,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1934")]
        Item1934,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1949")]
        Item1949,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2101")]
        Item2101,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2102")]
        Item2102,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2111")]
        Item2111,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2113")]
        Item2113,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2116")]
        Item2116,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2117")]
        Item2117,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2118")]
        Item2118,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2120")]
        Item2120,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2121")]
        Item2121,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2122")]
        Item2122,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2124")]
        Item2124,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2125")]
        Item2125,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2126")]
        Item2126,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2128")]
        Item2128,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2151")]
        Item2151,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2152")]
        Item2152,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2153")]
        Item2153,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2154")]
        Item2154,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2201")]
        Item2201,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2202")]
        Item2202,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2203")]
        Item2203,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2204")]
        Item2204,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2205")]
        Item2205,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2206")]
        Item2206,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2207")]
        Item2207,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2208")]
        Item2208,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2209")]
        Item2209,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2251")]
        Item2251,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2252")]
        Item2252,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2253")]
        Item2253,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2254")]
        Item2254,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2255")]
        Item2255,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2256")]
        Item2256,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2257")]
        Item2257,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2301")]
        Item2301,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2302")]
        Item2302,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2303")]
        Item2303,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2304")]
        Item2304,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2305")]
        Item2305,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2306")]
        Item2306,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2351")]
        Item2351,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2352")]
        Item2352,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2353")]
        Item2353,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2354")]
        Item2354,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2355")]
        Item2355,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2356")]
        Item2356,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2401")]
        Item2401,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2403")]
        Item2403,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2406")]
        Item2406,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2407")]
        Item2407,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2408")]
        Item2408,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2409")]
        Item2409,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2410")]
        Item2410,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2411")]
        Item2411,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2414")]
        Item2414,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2415")]
        Item2415,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2501")]
        Item2501,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2503")]
        Item2503,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2504")]
        Item2504,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2505")]
        Item2505,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2506")]
        Item2506,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2551")]
        Item2551,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2552")]
        Item2552,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2553")]
        Item2553,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2554")]
        Item2554,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2555")]
        Item2555,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2556")]
        Item2556,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2557")]
        Item2557,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2603")]
        Item2603,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2651")]
        Item2651,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2652")]
        Item2652,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2653")]
        Item2653,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2658")]
        Item2658,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2659")]
        Item2659,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2660")]
        Item2660,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2661")]
        Item2661,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2662")]
        Item2662,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2663")]
        Item2663,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2664")]
        Item2664,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2901")]
        Item2901,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2902")]
        Item2902,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2903")]
        Item2903,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2904")]
        Item2904,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2905")]
        Item2905,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2906")]
        Item2906,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2907")]
        Item2907,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2908")]
        Item2908,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2909")]
        Item2909,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2910")]
        Item2910,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2911")]
        Item2911,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2912")]
        Item2912,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2913")]
        Item2913,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2914")]
        Item2914,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2915")]
        Item2915,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2916")]
        Item2916,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2917")]
        Item2917,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2918")]
        Item2918,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2919")]
        Item2919,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2920")]
        Item2920,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2921")]
        Item2921,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2922")]
        Item2922,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2923")]
        Item2923,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2924")]
        Item2924,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2925")]
        Item2925,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2931")]
        Item2931,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2932")]
        Item2932,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2933")]
        Item2933,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2934")]
        Item2934,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2949")]
        Item2949,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3101")]
        Item3101,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3102")]
        Item3102,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3126")]
        Item3126,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3127")]
        Item3127,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3128")]
        Item3128,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3201")]
        Item3201,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3202")]
        Item3202,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3205")]
        Item3205,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3206")]
        Item3206,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3207")]
        Item3207,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3211")]
        Item3211,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3251")]
        Item3251,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3301")]
        Item3301,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3351")]
        Item3351,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3352")]
        Item3352,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3353")]
        Item3353,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3354")]
        Item3354,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3355")]
        Item3355,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3356")]
        Item3356,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3503")]
        Item3503,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3551")]
        Item3551,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3553")]
        Item3553,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3556")]
        Item3556,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3651")]
        Item3651,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3652")]
        Item3652,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3653")]
        Item3653,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3930")]
        Item3930,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3949")]
        Item3949,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5101")]
        Item5101,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5102")]
        Item5102,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5103")]
        Item5103,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5104")]
        Item5104,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5105")]
        Item5105,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5106")]
        Item5106,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5109")]
        Item5109,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5110")]
        Item5110,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5111")]
        Item5111,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5112")]
        Item5112,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5113")]
        Item5113,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5114")]
        Item5114,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5115")]
        Item5115,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5116")]
        Item5116,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5117")]
        Item5117,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5118")]
        Item5118,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5119")]
        Item5119,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5120")]
        Item5120,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5122")]
        Item5122,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5123")]
        Item5123,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5124")]
        Item5124,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5125")]
        Item5125,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5151")]
        Item5151,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5152")]
        Item5152,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5153")]
        Item5153,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5155")]
        Item5155,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5156")]
        Item5156,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5201")]
        Item5201,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5202")]
        Item5202,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5205")]
        Item5205,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5206")]
        Item5206,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5207")]
        Item5207,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5208")]
        Item5208,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5209")]
        Item5209,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5210")]
        Item5210,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5251")]
        Item5251,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5252")]
        Item5252,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5253")]
        Item5253,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5254")]
        Item5254,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5255")]
        Item5255,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5256")]
        Item5256,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5257")]
        Item5257,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5258")]
        Item5258,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5401")]
        Item5401,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5402")]
        Item5402,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5403")]
        Item5403,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5405")]
        Item5405,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5408")]
        Item5408,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5409")]
        Item5409,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5410")]
        Item5410,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5411")]
        Item5411,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5412")]
        Item5412,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5413")]
        Item5413,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5414")]
        Item5414,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5415")]
        Item5415,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5451")]
        Item5451,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5501")]
        Item5501,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5502")]
        Item5502,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5503")]
        Item5503,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5504")]
        Item5504,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5505")]
        Item5505,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5551")]
        Item5551,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5552")]
        Item5552,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5553")]
        Item5553,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5554")]
        Item5554,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5555")]
        Item5555,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5556")]
        Item5556,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5557")]
        Item5557,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5601")]
        Item5601,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5602")]
        Item5602,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5603")]
        Item5603,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5605")]
        Item5605,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5606")]
        Item5606,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5651")]
        Item5651,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5652")]
        Item5652,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5653")]
        Item5653,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5654")]
        Item5654,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5655")]
        Item5655,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5656")]
        Item5656,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5657")]
        Item5657,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5658")]
        Item5658,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5659")]
        Item5659,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5660")]
        Item5660,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5661")]
        Item5661,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5662")]
        Item5662,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5663")]
        Item5663,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5664")]
        Item5664,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5665")]
        Item5665,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5666")]
        Item5666,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5667")]
        Item5667,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5901")]
        Item5901,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5902")]
        Item5902,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5903")]
        Item5903,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5904")]
        Item5904,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5905")]
        Item5905,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5906")]
        Item5906,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5907")]
        Item5907,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5908")]
        Item5908,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5909")]
        Item5909,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5910")]
        Item5910,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5911")]
        Item5911,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5912")]
        Item5912,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5913")]
        Item5913,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5914")]
        Item5914,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5915")]
        Item5915,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5916")]
        Item5916,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5917")]
        Item5917,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5918")]
        Item5918,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5919")]
        Item5919,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5920")]
        Item5920,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5921")]
        Item5921,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5922")]
        Item5922,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5923")]
        Item5923,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5924")]
        Item5924,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5925")]
        Item5925,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5926")]
        Item5926,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5927")]
        Item5927,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5928")]
        Item5928,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5929")]
        Item5929,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5931")]
        Item5931,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5932")]
        Item5932,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5933")]
        Item5933,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5934")]
        Item5934,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5949")]
        Item5949,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6101")]
        Item6101,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6102")]
        Item6102,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6103")]
        Item6103,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6104")]
        Item6104,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6105")]
        Item6105,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6106")]
        Item6106,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6107")]
        Item6107,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6108")]
        Item6108,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6109")]
        Item6109,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6110")]
        Item6110,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6111")]
        Item6111,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6112")]
        Item6112,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6113")]
        Item6113,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6114")]
        Item6114,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6115")]
        Item6115,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6116")]
        Item6116,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6117")]
        Item6117,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6118")]
        Item6118,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6119")]
        Item6119,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6120")]
        Item6120,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6122")]
        Item6122,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6123")]
        Item6123,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6124")]
        Item6124,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6125")]
        Item6125,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6151")]
        Item6151,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6152")]
        Item6152,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6153")]
        Item6153,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6155")]
        Item6155,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6156")]
        Item6156,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6201")]
        Item6201,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6202")]
        Item6202,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6205")]
        Item6205,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6206")]
        Item6206,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6207")]
        Item6207,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6208")]
        Item6208,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6209")]
        Item6209,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6210")]
        Item6210,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6251")]
        Item6251,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6252")]
        Item6252,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6253")]
        Item6253,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6254")]
        Item6254,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6255")]
        Item6255,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6256")]
        Item6256,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6257")]
        Item6257,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6258")]
        Item6258,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6401")]
        Item6401,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6402")]
        Item6402,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6403")]
        Item6403,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6404")]
        Item6404,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6408")]
        Item6408,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6409")]
        Item6409,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6410")]
        Item6410,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6411")]
        Item6411,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6412")]
        Item6412,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6413")]
        Item6413,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6414")]
        Item6414,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6415")]
        Item6415,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6501")]
        Item6501,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6502")]
        Item6502,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6503")]
        Item6503,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6504")]
        Item6504,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6505")]
        Item6505,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6551")]
        Item6551,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6552")]
        Item6552,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6553")]
        Item6553,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6554")]
        Item6554,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6555")]
        Item6555,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6556")]
        Item6556,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6557")]
        Item6557,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6603")]
        Item6603,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6651")]
        Item6651,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6652")]
        Item6652,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6653")]
        Item6653,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6654")]
        Item6654,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6655")]
        Item6655,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6656")]
        Item6656,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6657")]
        Item6657,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6658")]
        Item6658,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6659")]
        Item6659,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6660")]
        Item6660,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6661")]
        Item6661,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6662")]
        Item6662,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6663")]
        Item6663,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6664")]
        Item6664,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6665")]
        Item6665,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6666")]
        Item6666,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6667")]
        Item6667,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6901")]
        Item6901,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6902")]
        Item6902,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6903")]
        Item6903,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6904")]
        Item6904,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6905")]
        Item6905,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6906")]
        Item6906,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6907")]
        Item6907,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6908")]
        Item6908,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6909")]
        Item6909,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6910")]
        Item6910,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6911")]
        Item6911,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6912")]
        Item6912,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6913")]
        Item6913,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6914")]
        Item6914,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6915")]
        Item6915,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6916")]
        Item6916,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6917")]
        Item6917,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6918")]
        Item6918,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6919")]
        Item6919,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6920")]
        Item6920,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6921")]
        Item6921,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6922")]
        Item6922,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6923")]
        Item6923,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6924")]
        Item6924,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6925")]
        Item6925,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6929")]
        Item6929,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6931")]
        Item6931,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6932")]
        Item6932,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6933")]
        Item6933,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6934")]
        Item6934,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6949")]
        Item6949,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7101")]
        Item7101,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7102")]
        Item7102,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7105")]
        Item7105,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7106")]
        Item7106,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7127")]
        Item7127,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7201")]
        Item7201,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7202")]
        Item7202,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7205")]
        Item7205,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7206")]
        Item7206,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7207")]
        Item7207,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7210")]
        Item7210,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7211")]
        Item7211,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7251")]
        Item7251,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7501")]
        Item7501,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7551")]
        Item7551,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7553")]
        Item7553,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7556")]
        Item7556,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7651")]
        Item7651,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7654")]
        Item7654,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7667")]
        Item7667,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7930")]
        Item7930,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7949")]
        Item7949,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetProdIndTot
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetProdDI
    {
        
        private string _nDI;
        
        private string _dDI;
        
        private string _xLocDesemb;
        
        private TUfEmi _uFDesemb;
        
        private string _dDesemb;
        
        private string _cExportador;
        
        private List<TNFeInfNFeDetProdDIAdi> _adi;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string nDI
        {
            get
            {
                return this._nDI;
            }
            set
            {
                this._nDI = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string dDI
        {
            get
            {
                return this._dDI;
            }
            set
            {
                this._dDI = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string xLocDesemb
        {
            get
            {
                return this._xLocDesemb;
            }
            set
            {
                this._xLocDesemb = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public TUfEmi UFDesemb
        {
            get
            {
                return this._uFDesemb;
            }
            set
            {
                this._uFDesemb = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string dDesemb
        {
            get
            {
                return this._dDesemb;
            }
            set
            {
                this._dDesemb = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string cExportador
        {
            get
            {
                return this._cExportador;
            }
            set
            {
                this._cExportador = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("adi", Order=6)]
        public List<TNFeInfNFeDetProdDIAdi> adi
        {
            get
            {
                return this._adi;
            }
            set
            {
                this._adi = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetProdDI));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdDI object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProdDI object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdDI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetProdDI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdDI);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetProdDI obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetProdDI Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetProdDI)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetProdDI Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetProdDI)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdDI object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProdDI object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdDI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdDI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdDI);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdDI obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetProdDI LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetProdDIAdi
    {
        
        private string _nAdicao;
        
        private string _nSeqAdic;
        
        private string _cFabricante;
        
        private string _vDescDI;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string nAdicao
        {
            get
            {
                return this._nAdicao;
            }
            set
            {
                this._nAdicao = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string nSeqAdic
        {
            get
            {
                return this._nSeqAdic;
            }
            set
            {
                this._nSeqAdic = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string cFabricante
        {
            get
            {
                return this._cFabricante;
            }
            set
            {
                this._cFabricante = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string vDescDI
        {
            get
            {
                return this._vDescDI;
            }
            set
            {
                this._vDescDI = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetProdDIAdi));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdDIAdi object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProdDIAdi object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdDIAdi object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetProdDIAdi obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdDIAdi);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetProdDIAdi obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetProdDIAdi Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetProdDIAdi)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetProdDIAdi Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetProdDIAdi)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdDIAdi object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProdDIAdi object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdDIAdi object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdDIAdi obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdDIAdi);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdDIAdi obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetProdDIAdi LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetProdArma
    {
        
        private TNFeInfNFeDetProdArmaTpArma _tpArma;
        
        private string _nSerie;
        
        private string _nCano;
        
        private string _descr;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TNFeInfNFeDetProdArmaTpArma tpArma
        {
            get
            {
                return this._tpArma;
            }
            set
            {
                this._tpArma = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string nSerie
        {
            get
            {
                return this._nSerie;
            }
            set
            {
                this._nSerie = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string nCano
        {
            get
            {
                return this._nCano;
            }
            set
            {
                this._nCano = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string descr
        {
            get
            {
                return this._descr;
            }
            set
            {
                this._descr = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetProdArma));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdArma object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProdArma object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdArma object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetProdArma obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdArma);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetProdArma obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetProdArma Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetProdArma)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetProdArma Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetProdArma)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdArma object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProdArma object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdArma object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdArma obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdArma);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdArma obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetProdArma LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetProdArmaTpArma
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetProdComb
    {
        
        private TcProdANP _cProdANP;
        
        private string _cODIF;
        
        private string _qTemp;
        
        private TUf _uFCons;
        
        private TNFeInfNFeDetProdCombCIDE _cIDE;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TcProdANP cProdANP
        {
            get
            {
                return this._cProdANP;
            }
            set
            {
                this._cProdANP = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string CODIF
        {
            get
            {
                return this._cODIF;
            }
            set
            {
                this._cODIF = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string qTemp
        {
            get
            {
                return this._qTemp;
            }
            set
            {
                this._qTemp = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public TUf UFCons
        {
            get
            {
                return this._uFCons;
            }
            set
            {
                this._uFCons = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public TNFeInfNFeDetProdCombCIDE CIDE
        {
            get
            {
                return this._cIDE;
            }
            set
            {
                this._cIDE = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetProdComb));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdComb object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProdComb object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdComb object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetProdComb obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdComb);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetProdComb obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetProdComb Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetProdComb)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetProdComb Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetProdComb)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdComb object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProdComb object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdComb object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdComb obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdComb);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdComb obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetProdComb LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TcProdANP
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203073")]
        Item110203073,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204001")]
        Item110204001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204002")]
        Item110204002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101027")]
        Item140101027,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101026")]
        Item140101026,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("740101005")]
        Item740101005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("740101004")]
        Item740101004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("740101001")]
        Item740101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("740101006")]
        Item740101006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("740101002")]
        Item740101002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203083")]
        Item110203083,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("910101001")]
        Item910101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103001")]
        Item110103001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330101001")]
        Item330101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203091")]
        Item110203091,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120204001")]
        Item120204001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110106001")]
        Item110106001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120206001")]
        Item120206001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101001")]
        Item110101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101042")]
        Item110101042,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("810201001")]
        Item810201001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204003")]
        Item110204003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330201005")]
        Item330201005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330201006")]
        Item330201006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330201004")]
        Item330201004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105001")]
        Item110105001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203072")]
        Item110203072,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203001")]
        Item110203001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201001")]
        Item110201001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101002")]
        Item110101002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203002")]
        Item110203002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120205010")]
        Item120205010,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203003")]
        Item110203003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204004")]
        Item110204004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204005")]
        Item110204005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204006")]
        Item110204006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204007")]
        Item110204007,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204008")]
        Item110204008,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204009")]
        Item110204009,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204010")]
        Item110204010,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204011")]
        Item110204011,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105027")]
        Item110105027,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103003")]
        Item110103003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103002")]
        Item110103002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105002")]
        Item110105002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205001")]
        Item110205001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120203002")]
        Item120203002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120205001")]
        Item120205001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203004")]
        Item110203004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120203001")]
        Item120203001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("530102001")]
        Item530102001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("530101002")]
        Item530101002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110108001")]
        Item110108001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105017")]
        Item110105017,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206019")]
        Item110206019,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205023")]
        Item110205023,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203092")]
        Item110203092,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201002")]
        Item110201002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120202001")]
        Item120202001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101003")]
        Item110101003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101004")]
        Item110101004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103004")]
        Item110103004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103005")]
        Item110103005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101005")]
        Item110101005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204012")]
        Item110204012,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204013")]
        Item110204013,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204014")]
        Item110204014,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110102001")]
        Item110102001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120207003")]
        Item120207003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201003")]
        Item110201003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201004")]
        Item110201004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201005")]
        Item110201005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201006")]
        Item110201006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206001")]
        Item110206001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205002")]
        Item110205002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203005")]
        Item110203005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205003")]
        Item110205003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330201001")]
        Item330201001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206002")]
        Item110206002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101006")]
        Item110101006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101007")]
        Item110101007,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101038")]
        Item110101038,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120205002")]
        Item120205002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101001")]
        Item820101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101010")]
        Item820101010,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101999")]
        Item820101999,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206003")]
        Item110206003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201007")]
        Item110201007,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120201001")]
        Item120201001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201008")]
        Item110201008,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103017")]
        Item110103017,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205004")]
        Item110205004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203077")]
        Item110203077,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101008")]
        Item110101008,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203006")]
        Item110203006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203007")]
        Item110203007,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201009")]
        Item110201009,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203008")]
        Item110203008,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203009")]
        Item110203009,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203010")]
        Item110203010,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120203004")]
        Item120203004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206004")]
        Item110206004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610101009")]
        Item610101009,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120205003")]
        Item120205003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205005")]
        Item110205005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203092")]
        Item1102030921,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204015")]
        Item110204015,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210202003")]
        Item210202003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210202001")]
        Item210202001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210202002")]
        Item210202002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105018")]
        Item110105018,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203011")]
        Item110203011,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203012")]
        Item110203012,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101009")]
        Item110101009,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110104001")]
        Item110104001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110104006")]
        Item110104006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110106010")]
        Item110106010,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110202007")]
        Item110202007,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110106002")]
        Item110106002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110111002")]
        Item110111002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103006")]
        Item110103006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105003")]
        Item110105003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201010")]
        Item110201010,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201011")]
        Item110201011,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201012")]
        Item110201012,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101010")]
        Item110101010,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101011")]
        Item110101011,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110108002")]
        Item110108002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110107001")]
        Item110107001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120202002")]
        Item120202002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110106003")]
        Item110106003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110108003")]
        Item110108003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203085")]
        Item110203085,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201013")]
        Item110201013,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110207001")]
        Item110207001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105023")]
        Item110105023,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101012")]
        Item110101012,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201014")]
        Item110201014,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620501002")]
        Item620501002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620501001")]
        Item620501001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610101005")]
        Item610101005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610101006")]
        Item610101006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("530101001")]
        Item530101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("530101020")]
        Item530101020,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("530101018")]
        Item530101018,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205006")]
        Item110205006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201015")]
        Item110201015,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203013")]
        Item110203013,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110202001")]
        Item110202001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120104001")]
        Item120104001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120102001")]
        Item120102001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205024")]
        Item110205024,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120205009")]
        Item120205009,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("540101002")]
        Item540101002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("540101001")]
        Item540101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110107002")]
        Item110107002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620601003")]
        Item620601003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201016")]
        Item110201016,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101013")]
        Item110101013,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120207001")]
        Item120207001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206020")]
        Item110206020,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110104008")]
        Item110104008,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201017")]
        Item110201017,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110108004")]
        Item110108004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201018")]
        Item110201018,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330201007")]
        Item330201007,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205007")]
        Item110205007,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203086")]
        Item110203086,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205008")]
        Item110205008,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("340101002")]
        Item340101002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("130202002")]
        Item130202002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("430101002")]
        Item430101002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("130202003")]
        Item130202003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("560101002")]
        Item560101002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("130202004")]
        Item130202004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101026")]
        Item820101026,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101032")]
        Item820101032,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101027")]
        Item820101027,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101004")]
        Item820101004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101005")]
        Item820101005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101022")]
        Item820101022,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101007")]
        Item820101007,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101002")]
        Item820101002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101009")]
        Item820101009,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101008")]
        Item820101008,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101014")]
        Item820101014,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101006")]
        Item820101006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101016")]
        Item820101016,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101015")]
        Item820101015,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101014")]
        Item8201010141,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101006")]
        Item8201010061,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101031")]
        Item820101031,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101030")]
        Item820101030,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101016")]
        Item8201010161,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101015")]
        Item8201010151,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101025")]
        Item820101025,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101007")]
        Item8201010071,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101002")]
        Item8201010021,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101026")]
        Item8201010261,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101009")]
        Item8201010091,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101008")]
        Item8201010081,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101027")]
        Item8201010271,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101007")]
        Item8201010072,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101002")]
        Item8201010022,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101028")]
        Item820101028,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101029")]
        Item820101029,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101009")]
        Item8201010092,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101008")]
        Item8201010082,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101011")]
        Item820101011,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101003")]
        Item820101003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101013")]
        Item820101013,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101012")]
        Item820101012,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101017")]
        Item820101017,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101018")]
        Item820101018,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101019")]
        Item820101019,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101020")]
        Item820101020,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101021")]
        Item820101021,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330101003")]
        Item330101003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("130202006")]
        Item130202006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203014")]
        Item110203014,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420201001")]
        Item420201001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420201003")]
        Item420201003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120204010")]
        Item120204010,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103007")]
        Item110103007,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204017")]
        Item110204017,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204051")]
        Item110204051,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204018")]
        Item110204018,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205022")]
        Item110205022,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203069")]
        Item110203069,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203015")]
        Item110203015,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206005")]
        Item110206005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203016")]
        Item110203016,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203017")]
        Item110203017,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203018")]
        Item110203018,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203088")]
        Item110203088,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203019")]
        Item110203019,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("530101003")]
        Item530101003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("530101019")]
        Item530101019,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101014")]
        Item110101014,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620101002")]
        Item620101002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("720101001")]
        Item720101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("720101002")]
        Item720101002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120205004")]
        Item120205004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203079")]
        Item110203079,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203020")]
        Item110203020,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201019")]
        Item110201019,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203021")]
        Item110203021,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110108005")]
        Item110108005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101015")]
        Item110101015,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110104002")]
        Item110104002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101016")]
        Item110101016,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620101007")]
        Item620101007,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140102001")]
        Item140102001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105004")]
        Item110105004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110107003")]
        Item110107003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203095")]
        Item110203095,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210301001")]
        Item210301001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("810102001")]
        Item810102001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("810102004")]
        Item810102004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("810102002")]
        Item810102002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("130201002")]
        Item130201002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("810102003")]
        Item810102003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("810101002")]
        Item810101002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("810101001")]
        Item810101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("810101003")]
        Item810101003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210301002")]
        Item210301002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330201010")]
        Item330201010,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204016")]
        Item110204016,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105005")]
        Item110105005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105006")]
        Item110105006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105007")]
        Item110105007,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110104003")]
        Item110104003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206006")]
        Item110206006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206007")]
        Item110206007,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203022")]
        Item110203022,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204019")]
        Item110204019,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206008")]
        Item110206008,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206009")]
        Item110206009,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101043")]
        Item110101043,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201020")]
        Item110201020,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203023")]
        Item110203023,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101017")]
        Item110101017,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101018")]
        Item110101018,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210302004")]
        Item210302004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210101001")]
        Item210101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210302003")]
        Item210302003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210302002")]
        Item210302002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210204001")]
        Item210204001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("220101003")]
        Item220101003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("220101004")]
        Item220101004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("220101002")]
        Item220101002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("220101001")]
        Item220101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("220101005")]
        Item220101005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("220101006")]
        Item220101006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("130202001")]
        Item130202001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("130202005")]
        Item130202005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("520101001")]
        Item520101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320101001")]
        Item320101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320101003")]
        Item320101003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320101002")]
        Item320101002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320103001")]
        Item320103001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320102002")]
        Item320102002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320102001")]
        Item320102001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320102004")]
        Item320102004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320102003")]
        Item320102003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320201001")]
        Item320201001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320201002")]
        Item320201002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("220102001")]
        Item220102001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320301002")]
        Item320301002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204020")]
        Item110204020,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203024")]
        Item110203024,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120205012")]
        Item120205012,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110207002")]
        Item110207002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203087")]
        Item110203087,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("730101002")]
        Item730101002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210203001")]
        Item210203001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210203002")]
        Item210203002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110104005")]
        Item110104005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101023")]
        Item140101023,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101024")]
        Item140101024,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101025")]
        Item140101025,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("650101001")]
        Item650101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110207003")]
        Item110207003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201021")]
        Item110201021,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103013")]
        Item110103013,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201022")]
        Item110201022,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203025")]
        Item110203025,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203026")]
        Item110203026,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206011")]
        Item110206011,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206010")]
        Item110206010,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203027")]
        Item110203027,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203028")]
        Item110203028,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203028")]
        Item1102030281,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330101008")]
        Item330101008,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330101002")]
        Item330101002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330101009")]
        Item330101009,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620101001")]
        Item620101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610201001")]
        Item610201001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610201002")]
        Item610201002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610201003")]
        Item610201003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("710101001")]
        Item710101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203074")]
        Item110203074,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201023")]
        Item110201023,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103008")]
        Item110103008,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203029")]
        Item110203029,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120205005")]
        Item120205005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204021")]
        Item110204021,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204022")]
        Item110204022,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204023")]
        Item110204023,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620101004")]
        Item620101004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620101005")]
        Item620101005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330101010")]
        Item330101010,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110202002")]
        Item110202002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110202003")]
        Item110202003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110207004")]
        Item110207004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101046")]
        Item110101046,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204024")]
        Item110204024,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110113001")]
        Item110113001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105015")]
        Item110105015,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101019")]
        Item110101019,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103015")]
        Item110103015,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205025")]
        Item110205025,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204025")]
        Item110204025,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204026")]
        Item110204026,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204027")]
        Item110204027,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120204009")]
        Item120204009,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205026")]
        Item110205026,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204028")]
        Item110204028,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204029")]
        Item110204029,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203080")]
        Item110203080,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120207004")]
        Item120207004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203030")]
        Item110203030,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105025")]
        Item110105025,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203031")]
        Item110203031,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203084")]
        Item110203084,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203032")]
        Item110203032,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204030")]
        Item110204030,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205009")]
        Item110205009,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110104004")]
        Item110104004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201024")]
        Item110201024,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201025")]
        Item110201025,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201026")]
        Item110201026,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201027")]
        Item110201027,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201028")]
        Item110201028,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201029")]
        Item110201029,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201030")]
        Item110201030,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110207005")]
        Item110207005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204031")]
        Item110204031,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110207006")]
        Item110207006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201031")]
        Item110201031,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201032")]
        Item110201032,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201033")]
        Item110201033,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120204002")]
        Item120204002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101020")]
        Item110101020,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("220102002")]
        Item220102002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105008")]
        Item110105008,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203033")]
        Item110203033,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105009")]
        Item110105009,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201034")]
        Item110201034,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203034")]
        Item110203034,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203035")]
        Item110203035,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("640201001")]
        Item640201001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120205011")]
        Item120205011,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101021")]
        Item110101021,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120103001")]
        Item120103001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203036")]
        Item110203036,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120204003")]
        Item120204003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201035")]
        Item110201035,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204032")]
        Item110204032,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101022")]
        Item110101022,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201036")]
        Item110201036,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101023")]
        Item110101023,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101024")]
        Item110101024,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101025")]
        Item110101025,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101039")]
        Item110101039,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204033")]
        Item110204033,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120207002")]
        Item120207002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110202004")]
        Item110202004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110202005")]
        Item110202005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203037")]
        Item110203037,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203037")]
        Item1102030371,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201037")]
        Item110201037,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203078")]
        Item110203078,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120203005")]
        Item120203005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120204010")]
        Item1202040101,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201038")]
        Item110201038,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201039")]
        Item110201039,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120101001")]
        Item120101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201040")]
        Item110201040,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201041")]
        Item110201041,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("740101007")]
        Item740101007,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420201003")]
        Item4202010031,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("640101001")]
        Item640101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205027")]
        Item110205027,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103009")]
        Item110103009,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103010")]
        Item110103010,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205010")]
        Item110205010,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101018")]
        Item8201010181,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101017")]
        Item8201010171,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101006")]
        Item8201010062,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101014")]
        Item8201010142,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101006")]
        Item8201010063,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101016")]
        Item8201010162,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101015")]
        Item8201010152,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101006")]
        Item8201010064,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101005")]
        Item8201010051,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101004")]
        Item8201010041,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101003")]
        Item8201010031,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101011")]
        Item8201010111,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101003")]
        Item8201010032,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101013")]
        Item8201010131,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101012")]
        Item8201010121,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101002")]
        Item8201010023,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101007")]
        Item8201010073,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101002")]
        Item8201010024,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101009")]
        Item8201010093,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101008")]
        Item8201010083,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110301001")]
        Item110301001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110208001")]
        Item110208001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203038")]
        Item110203038,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203089")]
        Item110203089,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201042")]
        Item110201042,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101026")]
        Item110101026,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620502001")]
        Item620502001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203039")]
        Item110203039,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110202008")]
        Item110202008,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204034")]
        Item110204034,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110110001")]
        Item110110001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("310102001")]
        Item310102001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("310103001")]
        Item310103001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("310101001")]
        Item310101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101027")]
        Item110101027,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205011")]
        Item110205011,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201062")]
        Item110201062,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203040")]
        Item110203040,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610101002")]
        Item610101002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610401002")]
        Item610401002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610101003")]
        Item610101003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610401003")]
        Item610401003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610101004")]
        Item610101004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610401004")]
        Item610401004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203041")]
        Item110203041,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203042")]
        Item110203042,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203043")]
        Item110203043,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203094")]
        Item110203094,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203044")]
        Item110203044,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203044")]
        Item1102030441,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("430101001")]
        Item430101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206021")]
        Item110206021,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120204004")]
        Item120204004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110207007")]
        Item110207007,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203045")]
        Item110203045,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201043")]
        Item110201043,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203046")]
        Item110203046,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203047")]
        Item110203047,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203048")]
        Item110203048,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203081")]
        Item110203081,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("430101004")]
        Item430101004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("510101003")]
        Item510101003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("510101001")]
        Item510101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("510101002")]
        Item510101002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("510102003")]
        Item510102003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("510102001")]
        Item510102001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("510102002")]
        Item510102002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("510201001")]
        Item510201001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("510201002")]
        Item510201002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("510201003")]
        Item510201003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("510301003")]
        Item510301003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101015")]
        Item140101015,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101009")]
        Item140101009,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101016")]
        Item140101016,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101017")]
        Item140101017,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101005")]
        Item140101005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101014")]
        Item140101014,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101018")]
        Item140101018,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101006")]
        Item140101006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101028")]
        Item140101028,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101021")]
        Item140101021,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101010")]
        Item140101010,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101012")]
        Item140101012,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101013")]
        Item140101013,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101001")]
        Item140101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101011")]
        Item140101011,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101003")]
        Item140101003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101002")]
        Item140101002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101008")]
        Item140101008,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101007")]
        Item140101007,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101019")]
        Item140101019,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101004")]
        Item140101004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("560101001")]
        Item560101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420105001")]
        Item420105001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420101005")]
        Item420101005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420101004")]
        Item420101004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420101003")]
        Item420101003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420102006")]
        Item420102006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420102005")]
        Item420102005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420102004")]
        Item420102004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420102003")]
        Item420102003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420104001")]
        Item420104001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101033")]
        Item820101033,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101034")]
        Item820101034,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101011")]
        Item8201010112,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101003")]
        Item8201010033,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101028")]
        Item8201010281,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101029")]
        Item8201010291,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101013")]
        Item8201010132,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101012")]
        Item8201010122,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420301003")]
        Item420301003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420101005")]
        Item4201010051,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420101002")]
        Item420101002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420101001")]
        Item420101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420101003")]
        Item4201010031,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420101004")]
        Item4201010041,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420101003")]
        Item4201010032,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420201001")]
        Item4202010011,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420201002")]
        Item420201002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420102005")]
        Item4201020051,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420102004")]
        Item4201020041,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420102002")]
        Item420102002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420102001")]
        Item420102001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420102003")]
        Item4201020031,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420102003")]
        Item4201020032,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420202001")]
        Item420202001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420301001")]
        Item420301001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420102006")]
        Item4201020061,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420103002")]
        Item420103002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420103001")]
        Item420103001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420103003")]
        Item420103003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610601001")]
        Item610601001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610701001")]
        Item610701001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("510301002")]
        Item510301002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620601001")]
        Item620601001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("660101001")]
        Item660101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620401001")]
        Item620401001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620301001")]
        Item620301001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620201001")]
        Item620201001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("630101001")]
        Item630101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110202006")]
        Item110202006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203093")]
        Item110203093,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204035")]
        Item110204035,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203049")]
        Item110203049,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201044")]
        Item110201044,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201045")]
        Item110201045,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206012")]
        Item110206012,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120203003")]
        Item120203003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320301001")]
        Item320301001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320103002")]
        Item320103002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("650101002")]
        Item650101002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("310102002")]
        Item310102002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("640401001")]
        Item640401001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101029")]
        Item140101029,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("740101003")]
        Item740101003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("810201002")]
        Item810201002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("530103001")]
        Item530103001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("340101003")]
        Item340101003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("430101003")]
        Item430101003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("560101003")]
        Item560101003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210302001")]
        Item210302001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210204002")]
        Item210204002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("130201001")]
        Item130201001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("530104001")]
        Item530104001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101022")]
        Item140101022,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101999")]
        Item140101999,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610201004")]
        Item610201004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("510301001")]
        Item510301001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420301002")]
        Item420301002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620601004")]
        Item620601004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620505001")]
        Item620505001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610501001")]
        Item610501001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620101008")]
        Item620101008,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610101010")]
        Item610101010,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110208002")]
        Item110208002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110110002")]
        Item110110002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("130202008")]
        Item130202008,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("410103001")]
        Item410103001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610301002")]
        Item610301002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610302001")]
        Item610302001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330101007")]
        Item330101007,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330201009")]
        Item330201009,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("730101001")]
        Item730101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203050")]
        Item110203050,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101028")]
        Item110101028,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101049")]
        Item110101049,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101029")]
        Item110101029,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101030")]
        Item110101030,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110104007")]
        Item110104007,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110111001")]
        Item110111001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120205006")]
        Item120205006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203051")]
        Item110203051,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101050")]
        Item110101050,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105028")]
        Item110105028,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105016")]
        Item110105016,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201046")]
        Item110201046,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110106007")]
        Item110106007,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101031")]
        Item110101031,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203082")]
        Item110203082,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610301001")]
        Item610301001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101032")]
        Item110101032,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101047")]
        Item110101047,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105021")]
        Item110105021,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105010")]
        Item110105010,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620101003")]
        Item620101003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210201001")]
        Item210201001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210201002")]
        Item210201002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210201003")]
        Item210201003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105020")]
        Item110105020,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105022")]
        Item110105022,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205012")]
        Item110205012,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620601002")]
        Item620601002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120206003")]
        Item120206003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204036")]
        Item110204036,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204037")]
        Item110204037,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204038")]
        Item110204038,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("410101001")]
        Item410101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("410101002")]
        Item410101002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("410102001")]
        Item410102001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("410102002")]
        Item410102002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103014")]
        Item110103014,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203052")]
        Item110203052,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330101005")]
        Item330101005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330101006")]
        Item330101006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205029")]
        Item110205029,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203053")]
        Item110203053,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120204008")]
        Item120204008,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203054")]
        Item110203054,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204039")]
        Item110204039,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201047")]
        Item110201047,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201048")]
        Item110201048,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103011")]
        Item110103011,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("340101001")]
        Item340101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("550101001")]
        Item550101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("550101005")]
        Item550101005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("550101002")]
        Item550101002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("550101003")]
        Item550101003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("550101004")]
        Item550101004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("130202007")]
        Item130202007,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105011")]
        Item110105011,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201049")]
        Item110201049,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101048")]
        Item110101048,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101033")]
        Item110101033,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101040")]
        Item110101040,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101045")]
        Item110101045,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101041")]
        Item110101041,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204040")]
        Item110204040,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105019")]
        Item110105019,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204041")]
        Item110204041,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105024")]
        Item110105024,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203070")]
        Item110203070,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203055")]
        Item110203055,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204042")]
        Item110204042,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203075")]
        Item110203075,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201050")]
        Item110201050,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201051")]
        Item110201051,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201052")]
        Item110201052,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201053")]
        Item110201053,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120201002")]
        Item120201002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105029")]
        Item110105029,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203056")]
        Item110203056,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204043")]
        Item110204043,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203090")]
        Item110203090,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101020")]
        Item140101020,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103018")]
        Item110103018,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110106004")]
        Item110106004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110106005")]
        Item110106005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110106006")]
        Item110106006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205028")]
        Item110205028,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105012")]
        Item110105012,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120204005")]
        Item120204005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205013")]
        Item110205013,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201054")]
        Item110201054,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101044")]
        Item110101044,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204044")]
        Item110204044,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203057")]
        Item110203057,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203058")]
        Item110203058,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120206002")]
        Item120206002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120206004")]
        Item120206004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330201008")]
        Item330201008,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330101004")]
        Item330101004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204045")]
        Item110204045,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204046")]
        Item110204046,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201063")]
        Item110201063,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206013")]
        Item110206013,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203059")]
        Item110203059,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203060")]
        Item110203060,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610101001")]
        Item610101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610401001")]
        Item610401001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206015")]
        Item110206015,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206014")]
        Item110206014,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204052")]
        Item110204052,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205015")]
        Item110205015,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205014")]
        Item110205014,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204047")]
        Item110204047,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205016")]
        Item110205016,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203061")]
        Item110203061,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205017")]
        Item110205017,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110106009")]
        Item110106009,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203062")]
        Item110203062,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206016")]
        Item110206016,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120205007")]
        Item120205007,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120201003")]
        Item120201003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620101006")]
        Item620101006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120205008")]
        Item120205008,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120204006")]
        Item120204006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201055")]
        Item110201055,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201056")]
        Item110201056,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201057")]
        Item110201057,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103016")]
        Item110103016,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205018")]
        Item110205018,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110107005")]
        Item110107005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330201002")]
        Item330201002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620504001")]
        Item620504001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620503001")]
        Item620503001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101034")]
        Item110101034,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110107004")]
        Item110107004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610101007")]
        Item610101007,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610101008")]
        Item610101008,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105014")]
        Item110105014,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205019")]
        Item110205019,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103012")]
        Item110103012,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203063")]
        Item110203063,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120204007")]
        Item120204007,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204048")]
        Item110204048,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105013")]
        Item110105013,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204049")]
        Item110204049,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206017")]
        Item110206017,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110109001")]
        Item110109001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110107006")]
        Item110107006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201059")]
        Item110201059,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201058")]
        Item110201058,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("640301001")]
        Item640301001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101035")]
        Item110101035,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101036")]
        Item110101036,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101037")]
        Item110101037,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205020")]
        Item110205020,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120207005")]
        Item120207005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206018")]
        Item110206018,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110108006")]
        Item110108006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203076")]
        Item110203076,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205021")]
        Item110205021,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330201003")]
        Item330201003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("130101001")]
        Item130101001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201060")]
        Item110201060,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203071")]
        Item110203071,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203065")]
        Item110203065,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203064")]
        Item110203064,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204050")]
        Item110204050,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203066")]
        Item110203066,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203067")]
        Item110203067,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201061")]
        Item110201061,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203068")]
        Item110203068,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105026")]
        Item110105026,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110106008")]
        Item110106008,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetProdCombCIDE
    {
        
        private string _qBCProd;
        
        private string _vAliqProd;
        
        private string _vCIDE;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string qBCProd
        {
            get
            {
                return this._qBCProd;
            }
            set
            {
                this._qBCProd = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string vAliqProd
        {
            get
            {
                return this._vAliqProd;
            }
            set
            {
                this._vAliqProd = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string vCIDE
        {
            get
            {
                return this._vCIDE;
            }
            set
            {
                this._vCIDE = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetProdCombCIDE));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdCombCIDE object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProdCombCIDE object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdCombCIDE object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetProdCombCIDE obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdCombCIDE);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetProdCombCIDE obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetProdCombCIDE Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetProdCombCIDE)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetProdCombCIDE Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetProdCombCIDE)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdCombCIDE object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProdCombCIDE object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdCombCIDE object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdCombCIDE obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdCombCIDE);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdCombCIDE obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetProdCombCIDE LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetProdMed
    {
        
        private string _nLote;
        
        private string _qLote;
        
        private string _dFab;
        
        private string _dVal;
        
        private string _vPMC;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string nLote
        {
            get
            {
                return this._nLote;
            }
            set
            {
                this._nLote = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string qLote
        {
            get
            {
                return this._qLote;
            }
            set
            {
                this._qLote = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string dFab
        {
            get
            {
                return this._dFab;
            }
            set
            {
                this._dFab = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string dVal
        {
            get
            {
                return this._dVal;
            }
            set
            {
                this._dVal = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string vPMC
        {
            get
            {
                return this._vPMC;
            }
            set
            {
                this._vPMC = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetProdMed));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdMed object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProdMed object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdMed object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetProdMed obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdMed);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetProdMed obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetProdMed Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetProdMed)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetProdMed Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetProdMed)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdMed object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProdMed object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdMed object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdMed obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdMed);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdMed obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetProdMed LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetProdVeicProd
    {
        
        private TNFeInfNFeDetProdVeicProdTpOp _tpOp;
        
        private string _chassi;
        
        private string _cCor;
        
        private string _xCor;
        
        private string _pot;
        
        private string _cilin;
        
        private string _pesoL;
        
        private string _pesoB;
        
        private string _nSerie;
        
        private string _tpComb;
        
        private string _nMotor;
        
        private string _cMT;
        
        private string _dist;
        
        private string _anoMod;
        
        private string _anoFab;
        
        private string _tpPint;
        
        private string _tpVeic;
        
        private string _espVeic;
        
        private TNFeInfNFeDetProdVeicProdVIN _vIN;
        
        private TNFeInfNFeDetProdVeicProdCondVeic _condVeic;
        
        private string _cMod;
        
        private string _cCorDENATRAN;
        
        private string _lota;
        
        private TNFeInfNFeDetProdVeicProdTpRest _tpRest;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TNFeInfNFeDetProdVeicProdTpOp tpOp
        {
            get
            {
                return this._tpOp;
            }
            set
            {
                this._tpOp = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string chassi
        {
            get
            {
                return this._chassi;
            }
            set
            {
                this._chassi = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string cCor
        {
            get
            {
                return this._cCor;
            }
            set
            {
                this._cCor = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string xCor
        {
            get
            {
                return this._xCor;
            }
            set
            {
                this._xCor = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string pot
        {
            get
            {
                return this._pot;
            }
            set
            {
                this._pot = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string cilin
        {
            get
            {
                return this._cilin;
            }
            set
            {
                this._cilin = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string pesoL
        {
            get
            {
                return this._pesoL;
            }
            set
            {
                this._pesoL = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string pesoB
        {
            get
            {
                return this._pesoB;
            }
            set
            {
                this._pesoB = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string nSerie
        {
            get
            {
                return this._nSerie;
            }
            set
            {
                this._nSerie = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string tpComb
        {
            get
            {
                return this._tpComb;
            }
            set
            {
                this._tpComb = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string nMotor
        {
            get
            {
                return this._nMotor;
            }
            set
            {
                this._nMotor = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string CMT
        {
            get
            {
                return this._cMT;
            }
            set
            {
                this._cMT = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public string dist
        {
            get
            {
                return this._dist;
            }
            set
            {
                this._dist = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public string anoMod
        {
            get
            {
                return this._anoMod;
            }
            set
            {
                this._anoMod = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public string anoFab
        {
            get
            {
                return this._anoFab;
            }
            set
            {
                this._anoFab = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=15)]
        public string tpPint
        {
            get
            {
                return this._tpPint;
            }
            set
            {
                this._tpPint = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=16)]
        public string tpVeic
        {
            get
            {
                return this._tpVeic;
            }
            set
            {
                this._tpVeic = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=17)]
        public string espVeic
        {
            get
            {
                return this._espVeic;
            }
            set
            {
                this._espVeic = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=18)]
        public TNFeInfNFeDetProdVeicProdVIN VIN
        {
            get
            {
                return this._vIN;
            }
            set
            {
                this._vIN = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=19)]
        public TNFeInfNFeDetProdVeicProdCondVeic condVeic
        {
            get
            {
                return this._condVeic;
            }
            set
            {
                this._condVeic = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=20)]
        public string cMod
        {
            get
            {
                return this._cMod;
            }
            set
            {
                this._cMod = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=21)]
        public string cCorDENATRAN
        {
            get
            {
                return this._cCorDENATRAN;
            }
            set
            {
                this._cCorDENATRAN = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=22)]
        public string lota
        {
            get
            {
                return this._lota;
            }
            set
            {
                this._lota = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=23)]
        public TNFeInfNFeDetProdVeicProdTpRest tpRest
        {
            get
            {
                return this._tpRest;
            }
            set
            {
                this._tpRest = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetProdVeicProd));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdVeicProd object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProdVeicProd object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdVeicProd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetProdVeicProd obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdVeicProd);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetProdVeicProd obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetProdVeicProd Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetProdVeicProd)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetProdVeicProd Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetProdVeicProd)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdVeicProd object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProdVeicProd object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdVeicProd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdVeicProd obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdVeicProd);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdVeicProd obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetProdVeicProd LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetProdVeicProdTpOp
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetProdVeicProdVIN
    {
        
        /// <remarks/>
        R,
        
        /// <remarks/>
        N,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetProdVeicProdCondVeic
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetProdVeicProdTpRest
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("9")]
        Item9,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImposto
    {
        
        private string _vTotTrib;
        
        private List<object> _items;
        
        private TNFeInfNFeDetImpostoPIS _pIS;
        
        private TNFeInfNFeDetImpostoPISST _pISST;
        
        private TNFeInfNFeDetImpostoCOFINS _cOFINS;
        
        private TNFeInfNFeDetImpostoCOFINSST _cOFINSST;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string vTotTrib
        {
            get
            {
                return this._vTotTrib;
            }
            set
            {
                this._vTotTrib = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ICMS", typeof(TNFeInfNFeDetImpostoICMS), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("II", typeof(TNFeInfNFeDetImpostoII), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("IPI", typeof(TNFeInfNFeDetImpostoIPI), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("ISSQN", typeof(TNFeInfNFeDetImpostoISSQN), Order=1)]
        public List<object> Items
        {
            get
            {
                return this._items;
            }
            set
            {
                this._items = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public TNFeInfNFeDetImpostoPIS PIS
        {
            get
            {
                return this._pIS;
            }
            set
            {
                this._pIS = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public TNFeInfNFeDetImpostoPISST PISST
        {
            get
            {
                return this._pISST;
            }
            set
            {
                this._pISST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public TNFeInfNFeDetImpostoCOFINS COFINS
        {
            get
            {
                return this._cOFINS;
            }
            set
            {
                this._cOFINS = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public TNFeInfNFeDetImpostoCOFINSST COFINSST
        {
            get
            {
                return this._cOFINSST;
            }
            set
            {
                this._cOFINSST = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImposto));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImposto object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImposto object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImposto object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImposto obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImposto);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImposto obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImposto Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImposto)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImposto Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImposto)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImposto object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImposto object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImposto object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImposto obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImposto);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImposto obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImposto LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMS
    {
        
        private object _item;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("ICMS00", typeof(TNFeInfNFeDetImpostoICMSICMS00), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMS10", typeof(TNFeInfNFeDetImpostoICMSICMS10), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMS20", typeof(TNFeInfNFeDetImpostoICMSICMS20), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMS30", typeof(TNFeInfNFeDetImpostoICMSICMS30), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMS40", typeof(TNFeInfNFeDetImpostoICMSICMS40), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMS51", typeof(TNFeInfNFeDetImpostoICMSICMS51), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMS60", typeof(TNFeInfNFeDetImpostoICMSICMS60), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMS70", typeof(TNFeInfNFeDetImpostoICMSICMS70), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMS90", typeof(TNFeInfNFeDetImpostoICMSICMS90), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMSPart", typeof(TNFeInfNFeDetImpostoICMSICMSPart), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMSSN101", typeof(TNFeInfNFeDetImpostoICMSICMSSN101), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMSSN102", typeof(TNFeInfNFeDetImpostoICMSICMSSN102), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMSSN201", typeof(TNFeInfNFeDetImpostoICMSICMSSN201), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMSSN202", typeof(TNFeInfNFeDetImpostoICMSICMSSN202), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMSSN500", typeof(TNFeInfNFeDetImpostoICMSICMSSN500), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMSSN900", typeof(TNFeInfNFeDetImpostoICMSICMSSN900), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMSST", typeof(TNFeInfNFeDetImpostoICMSICMSST), Order=0)]
        public object Item
        {
            get
            {
                return this._item;
            }
            set
            {
                this._item = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMS));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMS object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMS object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMS obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMS);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMS obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMS Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoICMS)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoICMS Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMS)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMS object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMS object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMS obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMS);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMS obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMS LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS00
    {
        
        private Torig _orig;
        
        private TNFeInfNFeDetImpostoICMSICMS00CST _cST;
        
        private TNFeInfNFeDetImpostoICMSICMS00ModBC _modBC;
        
        private string _vBC;
        
        private string _pICMS;
        
        private string _vICMS;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Torig orig
        {
            get
            {
                return this._orig;
            }
            set
            {
                this._orig = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public TNFeInfNFeDetImpostoICMSICMS00CST CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public TNFeInfNFeDetImpostoICMSICMS00ModBC modBC
        {
            get
            {
                return this._modBC;
            }
            set
            {
                this._modBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string vBC
        {
            get
            {
                return this._vBC;
            }
            set
            {
                this._vBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string pICMS
        {
            get
            {
                return this._pICMS;
            }
            set
            {
                this._pICMS = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string vICMS
        {
            get
            {
                return this._vICMS;
            }
            set
            {
                this._vICMS = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS00));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS00 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS00 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS00 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS00 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS00);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS00 obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS00 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMS00)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS00 Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMS00)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS00 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS00 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS00 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS00 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS00);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS00 obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS00 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum Torig
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        Item6,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        Item7,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8")]
        Item8,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS00CST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("00")]
        Item00,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS00ModBC
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS10
    {
        
        private Torig _orig;
        
        private TNFeInfNFeDetImpostoICMSICMS10CST _cST;
        
        private TNFeInfNFeDetImpostoICMSICMS10ModBC _modBC;
        
        private string _vBC;
        
        private string _pICMS;
        
        private string _vICMS;
        
        private TNFeInfNFeDetImpostoICMSICMS10ModBCST _modBCST;
        
        private string _pMVAST;
        
        private string _pRedBCST;
        
        private string _vBCST;
        
        private string _pICMSST;
        
        private string _vICMSST;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Torig orig
        {
            get
            {
                return this._orig;
            }
            set
            {
                this._orig = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public TNFeInfNFeDetImpostoICMSICMS10CST CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public TNFeInfNFeDetImpostoICMSICMS10ModBC modBC
        {
            get
            {
                return this._modBC;
            }
            set
            {
                this._modBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string vBC
        {
            get
            {
                return this._vBC;
            }
            set
            {
                this._vBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string pICMS
        {
            get
            {
                return this._pICMS;
            }
            set
            {
                this._pICMS = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string vICMS
        {
            get
            {
                return this._vICMS;
            }
            set
            {
                this._vICMS = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public TNFeInfNFeDetImpostoICMSICMS10ModBCST modBCST
        {
            get
            {
                return this._modBCST;
            }
            set
            {
                this._modBCST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string pMVAST
        {
            get
            {
                return this._pMVAST;
            }
            set
            {
                this._pMVAST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string pRedBCST
        {
            get
            {
                return this._pRedBCST;
            }
            set
            {
                this._pRedBCST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string vBCST
        {
            get
            {
                return this._vBCST;
            }
            set
            {
                this._vBCST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string pICMSST
        {
            get
            {
                return this._pICMSST;
            }
            set
            {
                this._pICMSST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string vICMSST
        {
            get
            {
                return this._vICMSST;
            }
            set
            {
                this._vICMSST = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS10));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS10 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS10 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS10 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS10 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS10);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS10 obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS10 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMS10)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS10 Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMS10)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS10 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS10 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS10 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS10 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS10);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS10 obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS10 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS10CST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10")]
        Item10,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS10ModBC
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS10ModBCST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS20
    {
        
        private Torig _orig;
        
        private TNFeInfNFeDetImpostoICMSICMS20CST _cST;
        
        private TNFeInfNFeDetImpostoICMSICMS20ModBC _modBC;
        
        private string _pRedBC;
        
        private string _vBC;
        
        private string _pICMS;
        
        private string _vICMS;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Torig orig
        {
            get
            {
                return this._orig;
            }
            set
            {
                this._orig = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public TNFeInfNFeDetImpostoICMSICMS20CST CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public TNFeInfNFeDetImpostoICMSICMS20ModBC modBC
        {
            get
            {
                return this._modBC;
            }
            set
            {
                this._modBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string pRedBC
        {
            get
            {
                return this._pRedBC;
            }
            set
            {
                this._pRedBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string vBC
        {
            get
            {
                return this._vBC;
            }
            set
            {
                this._vBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string pICMS
        {
            get
            {
                return this._pICMS;
            }
            set
            {
                this._pICMS = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string vICMS
        {
            get
            {
                return this._vICMS;
            }
            set
            {
                this._vICMS = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS20));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS20 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS20 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS20 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS20 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS20);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS20 obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS20 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMS20)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS20 Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMS20)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS20 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS20 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS20 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS20 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS20);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS20 obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS20 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS20CST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("20")]
        Item20,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS20ModBC
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS30
    {
        
        private Torig _orig;
        
        private TNFeInfNFeDetImpostoICMSICMS30CST _cST;
        
        private TNFeInfNFeDetImpostoICMSICMS30ModBCST _modBCST;
        
        private string _pMVAST;
        
        private string _pRedBCST;
        
        private string _vBCST;
        
        private string _pICMSST;
        
        private string _vICMSST;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Torig orig
        {
            get
            {
                return this._orig;
            }
            set
            {
                this._orig = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public TNFeInfNFeDetImpostoICMSICMS30CST CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public TNFeInfNFeDetImpostoICMSICMS30ModBCST modBCST
        {
            get
            {
                return this._modBCST;
            }
            set
            {
                this._modBCST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string pMVAST
        {
            get
            {
                return this._pMVAST;
            }
            set
            {
                this._pMVAST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string pRedBCST
        {
            get
            {
                return this._pRedBCST;
            }
            set
            {
                this._pRedBCST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string vBCST
        {
            get
            {
                return this._vBCST;
            }
            set
            {
                this._vBCST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string pICMSST
        {
            get
            {
                return this._pICMSST;
            }
            set
            {
                this._pICMSST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string vICMSST
        {
            get
            {
                return this._vICMSST;
            }
            set
            {
                this._vICMSST = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS30));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS30 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS30 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS30 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS30 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS30);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS30 obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS30 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMS30)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS30 Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMS30)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS30 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS30 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS30 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS30 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS30);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS30 obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS30 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS30CST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("30")]
        Item30,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS30ModBCST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS40
    {
        
        private Torig _orig;
        
        private TNFeInfNFeDetImpostoICMSICMS40CST _cST;
        
        private string _vICMS;
        
        private TNFeInfNFeDetImpostoICMSICMS40MotDesICMS _motDesICMS;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Torig orig
        {
            get
            {
                return this._orig;
            }
            set
            {
                this._orig = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public TNFeInfNFeDetImpostoICMSICMS40CST CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string vICMS
        {
            get
            {
                return this._vICMS;
            }
            set
            {
                this._vICMS = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public TNFeInfNFeDetImpostoICMSICMS40MotDesICMS motDesICMS
        {
            get
            {
                return this._motDesICMS;
            }
            set
            {
                this._motDesICMS = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS40));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS40 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS40 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS40 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS40 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS40);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS40 obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS40 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMS40)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS40 Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMS40)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS40 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS40 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS40 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS40 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS40);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS40 obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS40 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS40CST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("40")]
        Item40,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("41")]
        Item41,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("50")]
        Item50,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS40MotDesICMS
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        Item6,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        Item7,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8")]
        Item8,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("9")]
        Item9,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS51
    {
        
        private Torig _orig;
        
        private TNFeInfNFeDetImpostoICMSICMS51CST _cST;
        
        private System.Nullable<TNFeInfNFeDetImpostoICMSICMS51ModBC> _modBC;
        
        private string _pRedBC;
        
        private string _vBC;
        
        private string _pICMS;
        
        private string _vICMS;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Torig orig
        {
            get
            {
                return this._orig;
            }
            set
            {
                this._orig = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public TNFeInfNFeDetImpostoICMSICMS51CST CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public TNFeInfNFeDetImpostoICMSICMS51ModBC modBC
        {
            get
            {
                if (this._modBC.HasValue)
                {
                    return this._modBC.Value;
                }
                else
                {
                    return default(TNFeInfNFeDetImpostoICMSICMS51ModBC);
                }
            }
            set
            {
                this._modBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool modBCSpecified
        {
            get
            {
                return this._modBC.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._modBC = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string pRedBC
        {
            get
            {
                return this._pRedBC;
            }
            set
            {
                this._pRedBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string vBC
        {
            get
            {
                return this._vBC;
            }
            set
            {
                this._vBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string pICMS
        {
            get
            {
                return this._pICMS;
            }
            set
            {
                this._pICMS = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string vICMS
        {
            get
            {
                return this._vICMS;
            }
            set
            {
                this._vICMS = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS51));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS51 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS51 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS51 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS51 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS51);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS51 obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS51 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMS51)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS51 Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMS51)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS51 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS51 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS51 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS51 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS51);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS51 obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS51 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS51CST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("51")]
        Item51,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS51ModBC
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS60
    {
        
        private Torig _orig;
        
        private TNFeInfNFeDetImpostoICMSICMS60CST _cST;
        
        private string _vBCSTRet;
        
        private string _vICMSSTRet;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Torig orig
        {
            get
            {
                return this._orig;
            }
            set
            {
                this._orig = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public TNFeInfNFeDetImpostoICMSICMS60CST CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string vBCSTRet
        {
            get
            {
                return this._vBCSTRet;
            }
            set
            {
                this._vBCSTRet = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string vICMSSTRet
        {
            get
            {
                return this._vICMSSTRet;
            }
            set
            {
                this._vICMSSTRet = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS60));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS60 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS60 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS60 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS60 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS60);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS60 obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS60 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMS60)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS60 Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMS60)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS60 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS60 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS60 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS60 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS60);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS60 obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS60 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS60CST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("60")]
        Item60,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS70
    {
        
        private Torig _orig;
        
        private TNFeInfNFeDetImpostoICMSICMS70CST _cST;
        
        private TNFeInfNFeDetImpostoICMSICMS70ModBC _modBC;
        
        private string _pRedBC;
        
        private string _vBC;
        
        private string _pICMS;
        
        private string _vICMS;
        
        private TNFeInfNFeDetImpostoICMSICMS70ModBCST _modBCST;
        
        private string _pMVAST;
        
        private string _pRedBCST;
        
        private string _vBCST;
        
        private string _pICMSST;
        
        private string _vICMSST;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Torig orig
        {
            get
            {
                return this._orig;
            }
            set
            {
                this._orig = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public TNFeInfNFeDetImpostoICMSICMS70CST CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public TNFeInfNFeDetImpostoICMSICMS70ModBC modBC
        {
            get
            {
                return this._modBC;
            }
            set
            {
                this._modBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string pRedBC
        {
            get
            {
                return this._pRedBC;
            }
            set
            {
                this._pRedBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string vBC
        {
            get
            {
                return this._vBC;
            }
            set
            {
                this._vBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string pICMS
        {
            get
            {
                return this._pICMS;
            }
            set
            {
                this._pICMS = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string vICMS
        {
            get
            {
                return this._vICMS;
            }
            set
            {
                this._vICMS = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public TNFeInfNFeDetImpostoICMSICMS70ModBCST modBCST
        {
            get
            {
                return this._modBCST;
            }
            set
            {
                this._modBCST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string pMVAST
        {
            get
            {
                return this._pMVAST;
            }
            set
            {
                this._pMVAST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string pRedBCST
        {
            get
            {
                return this._pRedBCST;
            }
            set
            {
                this._pRedBCST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string vBCST
        {
            get
            {
                return this._vBCST;
            }
            set
            {
                this._vBCST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string pICMSST
        {
            get
            {
                return this._pICMSST;
            }
            set
            {
                this._pICMSST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public string vICMSST
        {
            get
            {
                return this._vICMSST;
            }
            set
            {
                this._vICMSST = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS70));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS70 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS70 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS70 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS70 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS70);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS70 obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS70 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMS70)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS70 Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMS70)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS70 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS70 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS70 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS70 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS70);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS70 obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS70 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS70CST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("70")]
        Item70,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS70ModBC
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS70ModBCST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS90
    {
        
        private Torig _orig;
        
        private TNFeInfNFeDetImpostoICMSICMS90CST _cST;
        
        private TNFeInfNFeDetImpostoICMSICMS90ModBC _modBC;
        
        private string _vBC;
        
        private string _pRedBC;
        
        private string _pICMS;
        
        private string _vICMS;
        
        private TNFeInfNFeDetImpostoICMSICMS90ModBCST _modBCST;
        
        private string _pMVAST;
        
        private string _pRedBCST;
        
        private string _vBCST;
        
        private string _pICMSST;
        
        private string _vICMSST;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Torig orig
        {
            get
            {
                return this._orig;
            }
            set
            {
                this._orig = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public TNFeInfNFeDetImpostoICMSICMS90CST CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public TNFeInfNFeDetImpostoICMSICMS90ModBC modBC
        {
            get
            {
                return this._modBC;
            }
            set
            {
                this._modBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string vBC
        {
            get
            {
                return this._vBC;
            }
            set
            {
                this._vBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string pRedBC
        {
            get
            {
                return this._pRedBC;
            }
            set
            {
                this._pRedBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string pICMS
        {
            get
            {
                return this._pICMS;
            }
            set
            {
                this._pICMS = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string vICMS
        {
            get
            {
                return this._vICMS;
            }
            set
            {
                this._vICMS = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public TNFeInfNFeDetImpostoICMSICMS90ModBCST modBCST
        {
            get
            {
                return this._modBCST;
            }
            set
            {
                this._modBCST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string pMVAST
        {
            get
            {
                return this._pMVAST;
            }
            set
            {
                this._pMVAST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string pRedBCST
        {
            get
            {
                return this._pRedBCST;
            }
            set
            {
                this._pRedBCST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string vBCST
        {
            get
            {
                return this._vBCST;
            }
            set
            {
                this._vBCST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string pICMSST
        {
            get
            {
                return this._pICMSST;
            }
            set
            {
                this._pICMSST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public string vICMSST
        {
            get
            {
                return this._vICMSST;
            }
            set
            {
                this._vICMSST = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS90));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS90 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS90 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS90 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS90 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS90);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS90 obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS90 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMS90)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS90 Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMS90)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS90 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS90 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS90 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS90 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS90);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS90 obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMS90 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS90CST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("90")]
        Item90,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS90ModBC
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS90ModBCST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMSPart
    {
        
        private Torig _orig;
        
        private TNFeInfNFeDetImpostoICMSICMSPartCST _cST;
        
        private TNFeInfNFeDetImpostoICMSICMSPartModBC _modBC;
        
        private string _vBC;
        
        private string _pRedBC;
        
        private string _pICMS;
        
        private string _vICMS;
        
        private TNFeInfNFeDetImpostoICMSICMSPartModBCST _modBCST;
        
        private string _pMVAST;
        
        private string _pRedBCST;
        
        private string _vBCST;
        
        private string _pICMSST;
        
        private string _vICMSST;
        
        private string _pBCOp;
        
        private TUf _uFST;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Torig orig
        {
            get
            {
                return this._orig;
            }
            set
            {
                this._orig = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public TNFeInfNFeDetImpostoICMSICMSPartCST CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public TNFeInfNFeDetImpostoICMSICMSPartModBC modBC
        {
            get
            {
                return this._modBC;
            }
            set
            {
                this._modBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string vBC
        {
            get
            {
                return this._vBC;
            }
            set
            {
                this._vBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string pRedBC
        {
            get
            {
                return this._pRedBC;
            }
            set
            {
                this._pRedBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string pICMS
        {
            get
            {
                return this._pICMS;
            }
            set
            {
                this._pICMS = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string vICMS
        {
            get
            {
                return this._vICMS;
            }
            set
            {
                this._vICMS = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public TNFeInfNFeDetImpostoICMSICMSPartModBCST modBCST
        {
            get
            {
                return this._modBCST;
            }
            set
            {
                this._modBCST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string pMVAST
        {
            get
            {
                return this._pMVAST;
            }
            set
            {
                this._pMVAST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string pRedBCST
        {
            get
            {
                return this._pRedBCST;
            }
            set
            {
                this._pRedBCST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string vBCST
        {
            get
            {
                return this._vBCST;
            }
            set
            {
                this._vBCST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string pICMSST
        {
            get
            {
                return this._pICMSST;
            }
            set
            {
                this._pICMSST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public string vICMSST
        {
            get
            {
                return this._vICMSST;
            }
            set
            {
                this._vICMSST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public string pBCOp
        {
            get
            {
                return this._pBCOp;
            }
            set
            {
                this._pBCOp = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public TUf UFST
        {
            get
            {
                return this._uFST;
            }
            set
            {
                this._uFST = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMSPart));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSPart object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMSPart object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSPart object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSPart obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSPart);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSPart obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMSPart Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMSPart)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoICMSICMSPart Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMSPart)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSPart object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMSPart object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSPart object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSPart obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSPart);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSPart obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMSPart LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSPartCST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10")]
        Item10,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("90")]
        Item90,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSPartModBC
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSPartModBCST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMSSN101
    {
        
        private Torig _orig;
        
        private TNFeInfNFeDetImpostoICMSICMSSN101CSOSN _cSOSN;
        
        private string _pCredSN;
        
        private string _vCredICMSSN;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Torig orig
        {
            get
            {
                return this._orig;
            }
            set
            {
                this._orig = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public TNFeInfNFeDetImpostoICMSICMSSN101CSOSN CSOSN
        {
            get
            {
                return this._cSOSN;
            }
            set
            {
                this._cSOSN = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string pCredSN
        {
            get
            {
                return this._pCredSN;
            }
            set
            {
                this._pCredSN = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string vCredICMSSN
        {
            get
            {
                return this._vCredICMSSN;
            }
            set
            {
                this._vCredICMSSN = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMSSN101));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN101 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMSSN101 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN101 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSSN101 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN101);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSSN101 obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMSSN101 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMSSN101)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoICMSICMSSN101 Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMSSN101)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN101 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMSSN101 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN101 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN101 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN101);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN101 obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMSSN101 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN101CSOSN
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("101")]
        Item101,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMSSN102
    {
        
        private Torig _orig;
        
        private TNFeInfNFeDetImpostoICMSICMSSN102CSOSN _cSOSN;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Torig orig
        {
            get
            {
                return this._orig;
            }
            set
            {
                this._orig = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public TNFeInfNFeDetImpostoICMSICMSSN102CSOSN CSOSN
        {
            get
            {
                return this._cSOSN;
            }
            set
            {
                this._cSOSN = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMSSN102));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN102 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMSSN102 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN102 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSSN102 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN102);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSSN102 obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMSSN102 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMSSN102)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoICMSICMSSN102 Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMSSN102)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN102 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMSSN102 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN102 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN102 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN102);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN102 obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMSSN102 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN102CSOSN
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("102")]
        Item102,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("103")]
        Item103,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("300")]
        Item300,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("400")]
        Item400,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMSSN201
    {
        
        private Torig _orig;
        
        private TNFeInfNFeDetImpostoICMSICMSSN201CSOSN _cSOSN;
        
        private TNFeInfNFeDetImpostoICMSICMSSN201ModBCST _modBCST;
        
        private string _pMVAST;
        
        private string _pRedBCST;
        
        private string _vBCST;
        
        private string _pICMSST;
        
        private string _vICMSST;
        
        private string _pCredSN;
        
        private string _vCredICMSSN;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Torig orig
        {
            get
            {
                return this._orig;
            }
            set
            {
                this._orig = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public TNFeInfNFeDetImpostoICMSICMSSN201CSOSN CSOSN
        {
            get
            {
                return this._cSOSN;
            }
            set
            {
                this._cSOSN = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public TNFeInfNFeDetImpostoICMSICMSSN201ModBCST modBCST
        {
            get
            {
                return this._modBCST;
            }
            set
            {
                this._modBCST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string pMVAST
        {
            get
            {
                return this._pMVAST;
            }
            set
            {
                this._pMVAST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string pRedBCST
        {
            get
            {
                return this._pRedBCST;
            }
            set
            {
                this._pRedBCST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string vBCST
        {
            get
            {
                return this._vBCST;
            }
            set
            {
                this._vBCST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string pICMSST
        {
            get
            {
                return this._pICMSST;
            }
            set
            {
                this._pICMSST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string vICMSST
        {
            get
            {
                return this._vICMSST;
            }
            set
            {
                this._vICMSST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string pCredSN
        {
            get
            {
                return this._pCredSN;
            }
            set
            {
                this._pCredSN = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string vCredICMSSN
        {
            get
            {
                return this._vCredICMSSN;
            }
            set
            {
                this._vCredICMSSN = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMSSN201));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN201 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMSSN201 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN201 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSSN201 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN201);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSSN201 obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMSSN201 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMSSN201)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoICMSICMSSN201 Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMSSN201)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN201 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMSSN201 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN201 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN201 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN201);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN201 obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMSSN201 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN201CSOSN
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("201")]
        Item201,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN201ModBCST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMSSN202
    {
        
        private Torig _orig;
        
        private TNFeInfNFeDetImpostoICMSICMSSN202CSOSN _cSOSN;
        
        private TNFeInfNFeDetImpostoICMSICMSSN202ModBCST _modBCST;
        
        private string _pMVAST;
        
        private string _pRedBCST;
        
        private string _vBCST;
        
        private string _pICMSST;
        
        private string _vICMSST;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Torig orig
        {
            get
            {
                return this._orig;
            }
            set
            {
                this._orig = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public TNFeInfNFeDetImpostoICMSICMSSN202CSOSN CSOSN
        {
            get
            {
                return this._cSOSN;
            }
            set
            {
                this._cSOSN = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public TNFeInfNFeDetImpostoICMSICMSSN202ModBCST modBCST
        {
            get
            {
                return this._modBCST;
            }
            set
            {
                this._modBCST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string pMVAST
        {
            get
            {
                return this._pMVAST;
            }
            set
            {
                this._pMVAST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string pRedBCST
        {
            get
            {
                return this._pRedBCST;
            }
            set
            {
                this._pRedBCST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string vBCST
        {
            get
            {
                return this._vBCST;
            }
            set
            {
                this._vBCST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string pICMSST
        {
            get
            {
                return this._pICMSST;
            }
            set
            {
                this._pICMSST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string vICMSST
        {
            get
            {
                return this._vICMSST;
            }
            set
            {
                this._vICMSST = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMSSN202));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN202 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMSSN202 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN202 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSSN202 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN202);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSSN202 obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMSSN202 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMSSN202)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoICMSICMSSN202 Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMSSN202)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN202 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMSSN202 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN202 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN202 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN202);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN202 obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMSSN202 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN202CSOSN
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("202")]
        Item202,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("203")]
        Item203,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN202ModBCST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMSSN500
    {
        
        private Torig _orig;
        
        private TNFeInfNFeDetImpostoICMSICMSSN500CSOSN _cSOSN;
        
        private string _vBCSTRet;
        
        private string _vICMSSTRet;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Torig orig
        {
            get
            {
                return this._orig;
            }
            set
            {
                this._orig = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public TNFeInfNFeDetImpostoICMSICMSSN500CSOSN CSOSN
        {
            get
            {
                return this._cSOSN;
            }
            set
            {
                this._cSOSN = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string vBCSTRet
        {
            get
            {
                return this._vBCSTRet;
            }
            set
            {
                this._vBCSTRet = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string vICMSSTRet
        {
            get
            {
                return this._vICMSSTRet;
            }
            set
            {
                this._vICMSSTRet = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMSSN500));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN500 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMSSN500 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN500 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSSN500 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN500);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSSN500 obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMSSN500 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMSSN500)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoICMSICMSSN500 Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMSSN500)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN500 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMSSN500 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN500 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN500 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN500);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN500 obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMSSN500 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN500CSOSN
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("500")]
        Item500,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMSSN900
    {
        
        private Torig _orig;
        
        private TNFeInfNFeDetImpostoICMSICMSSN900CSOSN _cSOSN;
        
        private TNFeInfNFeDetImpostoICMSICMSSN900ModBC _modBC;
        
        private string _vBC;
        
        private string _pRedBC;
        
        private string _pICMS;
        
        private string _vICMS;
        
        private TNFeInfNFeDetImpostoICMSICMSSN900ModBCST _modBCST;
        
        private string _pMVAST;
        
        private string _pRedBCST;
        
        private string _vBCST;
        
        private string _pICMSST;
        
        private string _vICMSST;
        
        private string _pCredSN;
        
        private string _vCredICMSSN;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Torig orig
        {
            get
            {
                return this._orig;
            }
            set
            {
                this._orig = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public TNFeInfNFeDetImpostoICMSICMSSN900CSOSN CSOSN
        {
            get
            {
                return this._cSOSN;
            }
            set
            {
                this._cSOSN = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public TNFeInfNFeDetImpostoICMSICMSSN900ModBC modBC
        {
            get
            {
                return this._modBC;
            }
            set
            {
                this._modBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string vBC
        {
            get
            {
                return this._vBC;
            }
            set
            {
                this._vBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string pRedBC
        {
            get
            {
                return this._pRedBC;
            }
            set
            {
                this._pRedBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string pICMS
        {
            get
            {
                return this._pICMS;
            }
            set
            {
                this._pICMS = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string vICMS
        {
            get
            {
                return this._vICMS;
            }
            set
            {
                this._vICMS = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public TNFeInfNFeDetImpostoICMSICMSSN900ModBCST modBCST
        {
            get
            {
                return this._modBCST;
            }
            set
            {
                this._modBCST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string pMVAST
        {
            get
            {
                return this._pMVAST;
            }
            set
            {
                this._pMVAST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string pRedBCST
        {
            get
            {
                return this._pRedBCST;
            }
            set
            {
                this._pRedBCST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string vBCST
        {
            get
            {
                return this._vBCST;
            }
            set
            {
                this._vBCST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string pICMSST
        {
            get
            {
                return this._pICMSST;
            }
            set
            {
                this._pICMSST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public string vICMSST
        {
            get
            {
                return this._vICMSST;
            }
            set
            {
                this._vICMSST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public string pCredSN
        {
            get
            {
                return this._pCredSN;
            }
            set
            {
                this._pCredSN = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public string vCredICMSSN
        {
            get
            {
                return this._vCredICMSSN;
            }
            set
            {
                this._vCredICMSSN = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMSSN900));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN900 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMSSN900 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN900 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSSN900 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN900);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSSN900 obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMSSN900 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMSSN900)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoICMSICMSSN900 Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMSSN900)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN900 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMSSN900 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN900 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN900 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN900);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN900 obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMSSN900 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN900CSOSN
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("900")]
        Item900,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN900ModBC
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN900ModBCST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMSST
    {
        
        private Torig _orig;
        
        private TNFeInfNFeDetImpostoICMSICMSSTCST _cST;
        
        private string _vBCSTRet;
        
        private string _vICMSSTRet;
        
        private string _vBCSTDest;
        
        private string _vICMSSTDest;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Torig orig
        {
            get
            {
                return this._orig;
            }
            set
            {
                this._orig = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public TNFeInfNFeDetImpostoICMSICMSSTCST CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string vBCSTRet
        {
            get
            {
                return this._vBCSTRet;
            }
            set
            {
                this._vBCSTRet = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string vICMSSTRet
        {
            get
            {
                return this._vICMSSTRet;
            }
            set
            {
                this._vICMSSTRet = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string vBCSTDest
        {
            get
            {
                return this._vBCSTDest;
            }
            set
            {
                this._vBCSTDest = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string vICMSSTDest
        {
            get
            {
                return this._vICMSSTDest;
            }
            set
            {
                this._vICMSSTDest = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMSST));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSST object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMSST object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSST object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSST obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSST);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSST obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMSST Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMSST)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoICMSICMSST Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMSST)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSST object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMSST object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSST object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSST obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSST);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSST obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoICMSICMSST LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSTCST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("41")]
        Item41,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoII
    {
        
        private string _vBC;
        
        private string _vDespAdu;
        
        private string _vII;
        
        private string _vIOF;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string vBC
        {
            get
            {
                return this._vBC;
            }
            set
            {
                this._vBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string vDespAdu
        {
            get
            {
                return this._vDespAdu;
            }
            set
            {
                this._vDespAdu = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string vII
        {
            get
            {
                return this._vII;
            }
            set
            {
                this._vII = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string vIOF
        {
            get
            {
                return this._vIOF;
            }
            set
            {
                this._vIOF = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoII));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoII object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoII object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoII object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoII obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoII);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoII obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoII Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoII)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoII Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoII)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoII object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoII object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoII object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoII obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoII);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoII obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoII LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoIPI
    {
        
        private string _clEnq;
        
        private string _cNPJProd;
        
        private string _cSelo;
        
        private string _qSelo;
        
        private string _cEnq;
        
        private object _item;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string clEnq
        {
            get
            {
                return this._clEnq;
            }
            set
            {
                this._clEnq = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string CNPJProd
        {
            get
            {
                return this._cNPJProd;
            }
            set
            {
                this._cNPJProd = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string cSelo
        {
            get
            {
                return this._cSelo;
            }
            set
            {
                this._cSelo = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string qSelo
        {
            get
            {
                return this._qSelo;
            }
            set
            {
                this._qSelo = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string cEnq
        {
            get
            {
                return this._cEnq;
            }
            set
            {
                this._cEnq = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("IPINT", typeof(TNFeInfNFeDetImpostoIPIIPINT), Order=5)]
        [System.Xml.Serialization.XmlElementAttribute("IPITrib", typeof(TNFeInfNFeDetImpostoIPIIPITrib), Order=5)]
        public object Item
        {
            get
            {
                return this._item;
            }
            set
            {
                this._item = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoIPI));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoIPI object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoIPI object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoIPI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoIPI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoIPI);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoIPI obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoIPI Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoIPI)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoIPI Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoIPI)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoIPI object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoIPI object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoIPI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoIPI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoIPI);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoIPI obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoIPI LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoIPIIPINT
    {
        
        private TNFeInfNFeDetImpostoIPIIPINTCST _cST;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TNFeInfNFeDetImpostoIPIIPINTCST CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoIPIIPINT));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoIPIIPINT object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoIPIIPINT object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoIPIIPINT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoIPIIPINT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoIPIIPINT);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoIPIIPINT obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoIPIIPINT Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoIPIIPINT)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoIPIIPINT Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoIPIIPINT)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoIPIIPINT object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoIPIIPINT object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoIPIIPINT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoIPIIPINT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoIPIIPINT);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoIPIIPINT obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoIPIIPINT LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoIPIIPINTCST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Item01,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("02")]
        Item02,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("03")]
        Item03,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        Item04,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("05")]
        Item05,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("51")]
        Item51,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("52")]
        Item52,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("53")]
        Item53,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("54")]
        Item54,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("55")]
        Item55,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoIPIIPITrib
    {
        
        private TNFeInfNFeDetImpostoIPIIPITribCST _cST;
        
        private string[] _items;
        
        private ItemsChoiceType[] _itemsElementName;
        
        private string _vIPI;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TNFeInfNFeDetImpostoIPIIPITribCST CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("pIPI", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("qUnid", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("vBC", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("vUnid", Order=1)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public string[] Items
        {
            get
            {
                return this._items;
            }
            set
            {
                this._items = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order=2)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType[] ItemsElementName
        {
            get
            {
                return this._itemsElementName;
            }
            set
            {
                this._itemsElementName = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string vIPI
        {
            get
            {
                return this._vIPI;
            }
            set
            {
                this._vIPI = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoIPIIPITrib));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoIPIIPITrib object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoIPIIPITrib object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoIPIIPITrib object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoIPIIPITrib obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoIPIIPITrib);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoIPIIPITrib obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoIPIIPITrib Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoIPIIPITrib)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoIPIIPITrib Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoIPIIPITrib)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoIPIIPITrib object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoIPIIPITrib object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoIPIIPITrib object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoIPIIPITrib obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoIPIIPITrib);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoIPIIPITrib obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoIPIIPITrib LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoIPIIPITribCST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("00")]
        Item00,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("49")]
        Item49,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("50")]
        Item50,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("99")]
        Item99,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe", IncludeInSchema=false)]
    public enum ItemsChoiceType
    {
        
        /// <remarks/>
        pIPI,
        
        /// <remarks/>
        qUnid,
        
        /// <remarks/>
        vBC,
        
        /// <remarks/>
        vUnid,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoISSQN
    {
        
        private string _vBC;
        
        private string _vAliq;
        
        private string _vISSQN;
        
        private string _cMunFG;
        
        private TCListServ _cListServ;
        
        private TNFeInfNFeDetImpostoISSQNCSitTrib _cSitTrib;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string vBC
        {
            get
            {
                return this._vBC;
            }
            set
            {
                this._vBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string vAliq
        {
            get
            {
                return this._vAliq;
            }
            set
            {
                this._vAliq = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string vISSQN
        {
            get
            {
                return this._vISSQN;
            }
            set
            {
                this._vISSQN = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string cMunFG
        {
            get
            {
                return this._cMunFG;
            }
            set
            {
                this._cMunFG = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public TCListServ cListServ
        {
            get
            {
                return this._cListServ;
            }
            set
            {
                this._cListServ = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public TNFeInfNFeDetImpostoISSQNCSitTrib cSitTrib
        {
            get
            {
                return this._cSitTrib;
            }
            set
            {
                this._cSitTrib = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoISSQN));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoISSQN object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoISSQN object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoISSQN object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoISSQN obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoISSQN);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoISSQN obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoISSQN Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoISSQN)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoISSQN Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoISSQN)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoISSQN object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoISSQN object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoISSQN object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoISSQN obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoISSQN);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoISSQN obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoISSQN LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TCListServ
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("101")]
        Item101,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("102")]
        Item102,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("103")]
        Item103,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("104")]
        Item104,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("105")]
        Item105,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("106")]
        Item106,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("107")]
        Item107,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("108")]
        Item108,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("201")]
        Item201,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("302")]
        Item302,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("303")]
        Item303,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("304")]
        Item304,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("305")]
        Item305,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("401")]
        Item401,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("402")]
        Item402,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("403")]
        Item403,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("404")]
        Item404,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("405")]
        Item405,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("406")]
        Item406,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("407")]
        Item407,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("408")]
        Item408,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("409")]
        Item409,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("410")]
        Item410,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("411")]
        Item411,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("412")]
        Item412,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("413")]
        Item413,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("414")]
        Item414,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("415")]
        Item415,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("416")]
        Item416,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("417")]
        Item417,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("418")]
        Item418,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("419")]
        Item419,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420")]
        Item420,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("421")]
        Item421,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("422")]
        Item422,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("423")]
        Item423,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("501")]
        Item501,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("502")]
        Item502,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("503")]
        Item503,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("504")]
        Item504,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("505")]
        Item505,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("506")]
        Item506,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("507")]
        Item507,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("508")]
        Item508,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("509")]
        Item509,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("601")]
        Item601,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("602")]
        Item602,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("603")]
        Item603,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("604")]
        Item604,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("605")]
        Item605,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("701")]
        Item701,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("702")]
        Item702,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("703")]
        Item703,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("704")]
        Item704,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("705")]
        Item705,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("706")]
        Item706,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("707")]
        Item707,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("708")]
        Item708,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("709")]
        Item709,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("710")]
        Item710,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("711")]
        Item711,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("712")]
        Item712,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("713")]
        Item713,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("716")]
        Item716,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("717")]
        Item717,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("718")]
        Item718,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("719")]
        Item719,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("720")]
        Item720,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("721")]
        Item721,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("722")]
        Item722,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("801")]
        Item801,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("802")]
        Item802,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("901")]
        Item901,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("902")]
        Item902,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("903")]
        Item903,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1001")]
        Item1001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1002")]
        Item1002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1003")]
        Item1003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1004")]
        Item1004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1005")]
        Item1005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1006")]
        Item1006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1007")]
        Item1007,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1008")]
        Item1008,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1009")]
        Item1009,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1010")]
        Item1010,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1101")]
        Item1101,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1102")]
        Item1102,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1103")]
        Item1103,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1104")]
        Item1104,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1201")]
        Item1201,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1202")]
        Item1202,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1203")]
        Item1203,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1204")]
        Item1204,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1205")]
        Item1205,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1206")]
        Item1206,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1207")]
        Item1207,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1208")]
        Item1208,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1209")]
        Item1209,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1210")]
        Item1210,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1211")]
        Item1211,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1212")]
        Item1212,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1213")]
        Item1213,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1214")]
        Item1214,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1215")]
        Item1215,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1216")]
        Item1216,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1217")]
        Item1217,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1302")]
        Item1302,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1303")]
        Item1303,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1304")]
        Item1304,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1305")]
        Item1305,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1401")]
        Item1401,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1402")]
        Item1402,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1403")]
        Item1403,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1404")]
        Item1404,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1405")]
        Item1405,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1406")]
        Item1406,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1407")]
        Item1407,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1408")]
        Item1408,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1409")]
        Item1409,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1410")]
        Item1410,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1411")]
        Item1411,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1412")]
        Item1412,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1413")]
        Item1413,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1501")]
        Item1501,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1502")]
        Item1502,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1503")]
        Item1503,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1504")]
        Item1504,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1505")]
        Item1505,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1506")]
        Item1506,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1507")]
        Item1507,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1508")]
        Item1508,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1509")]
        Item1509,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1510")]
        Item1510,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1511")]
        Item1511,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1512")]
        Item1512,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1513")]
        Item1513,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1514")]
        Item1514,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1515")]
        Item1515,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1516")]
        Item1516,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1517")]
        Item1517,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1518")]
        Item1518,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1601")]
        Item1601,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1701")]
        Item1701,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1702")]
        Item1702,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1703")]
        Item1703,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1704")]
        Item1704,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1705")]
        Item1705,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1706")]
        Item1706,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1708")]
        Item1708,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1709")]
        Item1709,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1710")]
        Item1710,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1711")]
        Item1711,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1712")]
        Item1712,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1713")]
        Item1713,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1714")]
        Item1714,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1715")]
        Item1715,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1716")]
        Item1716,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1717")]
        Item1717,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1718")]
        Item1718,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1719")]
        Item1719,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1720")]
        Item1720,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1721")]
        Item1721,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1722")]
        Item1722,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1723")]
        Item1723,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1724")]
        Item1724,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1801")]
        Item1801,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1901")]
        Item1901,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2001")]
        Item2001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2002")]
        Item2002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2003")]
        Item2003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2101")]
        Item2101,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2201")]
        Item2201,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2301")]
        Item2301,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2401")]
        Item2401,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2501")]
        Item2501,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2502")]
        Item2502,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2503")]
        Item2503,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2504")]
        Item2504,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2601")]
        Item2601,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2701")]
        Item2701,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2801")]
        Item2801,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2901")]
        Item2901,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3001")]
        Item3001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3101")]
        Item3101,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3201")]
        Item3201,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3301")]
        Item3301,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3401")]
        Item3401,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3501")]
        Item3501,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3601")]
        Item3601,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3701")]
        Item3701,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3801")]
        Item3801,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3901")]
        Item3901,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4001")]
        Item4001,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoISSQNCSitTrib
    {
        
        /// <remarks/>
        N,
        
        /// <remarks/>
        R,
        
        /// <remarks/>
        S,
        
        /// <remarks/>
        I,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoPIS
    {
        
        private object _item;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("PISAliq", typeof(TNFeInfNFeDetImpostoPISPISAliq), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("PISNT", typeof(TNFeInfNFeDetImpostoPISPISNT), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("PISOutr", typeof(TNFeInfNFeDetImpostoPISPISOutr), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("PISQtde", typeof(TNFeInfNFeDetImpostoPISPISQtde), Order=0)]
        public object Item
        {
            get
            {
                return this._item;
            }
            set
            {
                this._item = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoPIS));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPIS object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoPIS object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPIS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoPIS obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPIS);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoPIS obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoPIS Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoPIS)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoPIS Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoPIS)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPIS object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoPIS object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPIS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPIS obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPIS);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPIS obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoPIS LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoPISPISAliq
    {
        
        private TNFeInfNFeDetImpostoPISPISAliqCST _cST;
        
        private string _vBC;
        
        private string _pPIS;
        
        private string _vPIS;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TNFeInfNFeDetImpostoPISPISAliqCST CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string vBC
        {
            get
            {
                return this._vBC;
            }
            set
            {
                this._vBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string pPIS
        {
            get
            {
                return this._pPIS;
            }
            set
            {
                this._pPIS = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string vPIS
        {
            get
            {
                return this._vPIS;
            }
            set
            {
                this._vPIS = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoPISPISAliq));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISPISAliq object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoPISPISAliq object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISPISAliq object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoPISPISAliq obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISPISAliq);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoPISPISAliq obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoPISPISAliq Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoPISPISAliq)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoPISPISAliq Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoPISPISAliq)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISPISAliq object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoPISPISAliq object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISPISAliq object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISPISAliq obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISPISAliq);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISPISAliq obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoPISPISAliq LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoPISPISAliqCST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Item01,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("02")]
        Item02,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoPISPISNT
    {
        
        private TNFeInfNFeDetImpostoPISPISNTCST _cST;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TNFeInfNFeDetImpostoPISPISNTCST CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoPISPISNT));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISPISNT object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoPISPISNT object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISPISNT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoPISPISNT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISPISNT);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoPISPISNT obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoPISPISNT Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoPISPISNT)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoPISPISNT Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoPISPISNT)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISPISNT object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoPISPISNT object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISPISNT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISPISNT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISPISNT);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISPISNT obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoPISPISNT LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoPISPISNTCST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        Item04,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("06")]
        Item06,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("07")]
        Item07,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("08")]
        Item08,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("09")]
        Item09,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoPISPISOutr
    {
        
        private TNFeInfNFeDetImpostoPISPISOutrCST _cST;
        
        private string[] _items;
        
        private ItemsChoiceType1[] _itemsElementName;
        
        private string _vPIS;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TNFeInfNFeDetImpostoPISPISOutrCST CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("pPIS", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("qBCProd", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("vAliqProd", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("vBC", Order=1)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public string[] Items
        {
            get
            {
                return this._items;
            }
            set
            {
                this._items = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order=2)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType1[] ItemsElementName
        {
            get
            {
                return this._itemsElementName;
            }
            set
            {
                this._itemsElementName = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string vPIS
        {
            get
            {
                return this._vPIS;
            }
            set
            {
                this._vPIS = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoPISPISOutr));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISPISOutr object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoPISPISOutr object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISPISOutr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoPISPISOutr obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISPISOutr);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoPISPISOutr obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoPISPISOutr Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoPISPISOutr)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoPISPISOutr Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoPISPISOutr)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISPISOutr object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoPISPISOutr object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISPISOutr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISPISOutr obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISPISOutr);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISPISOutr obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoPISPISOutr LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoPISPISOutrCST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("49")]
        Item49,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("50")]
        Item50,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("51")]
        Item51,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("52")]
        Item52,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("53")]
        Item53,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("54")]
        Item54,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("55")]
        Item55,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("56")]
        Item56,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("60")]
        Item60,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("61")]
        Item61,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("62")]
        Item62,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("63")]
        Item63,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("64")]
        Item64,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("65")]
        Item65,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("66")]
        Item66,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("67")]
        Item67,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("70")]
        Item70,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("71")]
        Item71,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("72")]
        Item72,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("73")]
        Item73,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("74")]
        Item74,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("75")]
        Item75,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("98")]
        Item98,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("99")]
        Item99,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe", IncludeInSchema=false)]
    public enum ItemsChoiceType1
    {
        
        /// <remarks/>
        pPIS,
        
        /// <remarks/>
        qBCProd,
        
        /// <remarks/>
        vAliqProd,
        
        /// <remarks/>
        vBC,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoPISPISQtde
    {
        
        private TNFeInfNFeDetImpostoPISPISQtdeCST _cST;
        
        private string _qBCProd;
        
        private string _vAliqProd;
        
        private string _vPIS;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TNFeInfNFeDetImpostoPISPISQtdeCST CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string qBCProd
        {
            get
            {
                return this._qBCProd;
            }
            set
            {
                this._qBCProd = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string vAliqProd
        {
            get
            {
                return this._vAliqProd;
            }
            set
            {
                this._vAliqProd = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string vPIS
        {
            get
            {
                return this._vPIS;
            }
            set
            {
                this._vPIS = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoPISPISQtde));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISPISQtde object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoPISPISQtde object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISPISQtde object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoPISPISQtde obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISPISQtde);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoPISPISQtde obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoPISPISQtde Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoPISPISQtde)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoPISPISQtde Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoPISPISQtde)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISPISQtde object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoPISPISQtde object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISPISQtde object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISPISQtde obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISPISQtde);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISPISQtde obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoPISPISQtde LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoPISPISQtdeCST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("03")]
        Item03,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoPISST
    {
        
        private string[] _items;
        
        private ItemsChoiceType2[] _itemsElementName;
        
        private string _vPIS;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("pPIS", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("qBCProd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("vAliqProd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("vBC", Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public string[] Items
        {
            get
            {
                return this._items;
            }
            set
            {
                this._items = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType2[] ItemsElementName
        {
            get
            {
                return this._itemsElementName;
            }
            set
            {
                this._itemsElementName = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string vPIS
        {
            get
            {
                return this._vPIS;
            }
            set
            {
                this._vPIS = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoPISST));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISST object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoPISST object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISST object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoPISST obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISST);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoPISST obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoPISST Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoPISST)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoPISST Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoPISST)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISST object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoPISST object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISST object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISST obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISST);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISST obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoPISST LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe", IncludeInSchema=false)]
    public enum ItemsChoiceType2
    {
        
        /// <remarks/>
        pPIS,
        
        /// <remarks/>
        qBCProd,
        
        /// <remarks/>
        vAliqProd,
        
        /// <remarks/>
        vBC,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoCOFINS
    {
        
        private object _item;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("COFINSAliq", typeof(TNFeInfNFeDetImpostoCOFINSCOFINSAliq), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("COFINSNT", typeof(TNFeInfNFeDetImpostoCOFINSCOFINSNT), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("COFINSOutr", typeof(TNFeInfNFeDetImpostoCOFINSCOFINSOutr), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("COFINSQtde", typeof(TNFeInfNFeDetImpostoCOFINSCOFINSQtde), Order=0)]
        public object Item
        {
            get
            {
                return this._item;
            }
            set
            {
                this._item = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoCOFINS));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINS object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoCOFINS object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoCOFINS obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINS);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoCOFINS obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoCOFINS Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoCOFINS)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoCOFINS Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoCOFINS)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINS object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoCOFINS object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINS obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINS);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINS obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoCOFINS LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoCOFINSCOFINSAliq
    {
        
        private TNFeInfNFeDetImpostoCOFINSCOFINSAliqCST _cST;
        
        private string _vBC;
        
        private string _pCOFINS;
        
        private string _vCOFINS;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TNFeInfNFeDetImpostoCOFINSCOFINSAliqCST CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string vBC
        {
            get
            {
                return this._vBC;
            }
            set
            {
                this._vBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string pCOFINS
        {
            get
            {
                return this._pCOFINS;
            }
            set
            {
                this._pCOFINS = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string vCOFINS
        {
            get
            {
                return this._vCOFINS;
            }
            set
            {
                this._vCOFINS = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoCOFINSCOFINSAliq));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSCOFINSAliq object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoCOFINSCOFINSAliq object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSCOFINSAliq object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoCOFINSCOFINSAliq obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSCOFINSAliq);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoCOFINSCOFINSAliq obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoCOFINSCOFINSAliq Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoCOFINSCOFINSAliq)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoCOFINSCOFINSAliq Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoCOFINSCOFINSAliq)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSCOFINSAliq object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoCOFINSCOFINSAliq object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSCOFINSAliq object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSCOFINSAliq obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSCOFINSAliq);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSCOFINSAliq obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoCOFINSCOFINSAliq LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoCOFINSCOFINSAliqCST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Item01,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("02")]
        Item02,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoCOFINSCOFINSNT
    {
        
        private TNFeInfNFeDetImpostoCOFINSCOFINSNTCST _cST;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TNFeInfNFeDetImpostoCOFINSCOFINSNTCST CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoCOFINSCOFINSNT));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSCOFINSNT object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoCOFINSCOFINSNT object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSCOFINSNT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoCOFINSCOFINSNT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSCOFINSNT);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoCOFINSCOFINSNT obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoCOFINSCOFINSNT Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoCOFINSCOFINSNT)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoCOFINSCOFINSNT Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoCOFINSCOFINSNT)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSCOFINSNT object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoCOFINSCOFINSNT object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSCOFINSNT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSCOFINSNT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSCOFINSNT);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSCOFINSNT obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoCOFINSCOFINSNT LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoCOFINSCOFINSNTCST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        Item04,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("06")]
        Item06,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("07")]
        Item07,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("08")]
        Item08,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("09")]
        Item09,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoCOFINSCOFINSOutr
    {
        
        private TNFeInfNFeDetImpostoCOFINSCOFINSOutrCST _cST;
        
        private string[] _items;
        
        private ItemsChoiceType3[] _itemsElementName;
        
        private string _vCOFINS;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TNFeInfNFeDetImpostoCOFINSCOFINSOutrCST CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("pCOFINS", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("qBCProd", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("vAliqProd", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("vBC", Order=1)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public string[] Items
        {
            get
            {
                return this._items;
            }
            set
            {
                this._items = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order=2)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType3[] ItemsElementName
        {
            get
            {
                return this._itemsElementName;
            }
            set
            {
                this._itemsElementName = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string vCOFINS
        {
            get
            {
                return this._vCOFINS;
            }
            set
            {
                this._vCOFINS = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoCOFINSCOFINSOutr));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSCOFINSOutr object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoCOFINSCOFINSOutr object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSCOFINSOutr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoCOFINSCOFINSOutr obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSCOFINSOutr);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoCOFINSCOFINSOutr obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoCOFINSCOFINSOutr Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoCOFINSCOFINSOutr)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoCOFINSCOFINSOutr Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoCOFINSCOFINSOutr)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSCOFINSOutr object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoCOFINSCOFINSOutr object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSCOFINSOutr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSCOFINSOutr obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSCOFINSOutr);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSCOFINSOutr obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoCOFINSCOFINSOutr LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoCOFINSCOFINSOutrCST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("49")]
        Item49,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("50")]
        Item50,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("51")]
        Item51,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("52")]
        Item52,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("53")]
        Item53,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("54")]
        Item54,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("55")]
        Item55,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("56")]
        Item56,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("60")]
        Item60,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("61")]
        Item61,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("62")]
        Item62,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("63")]
        Item63,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("64")]
        Item64,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("65")]
        Item65,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("66")]
        Item66,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("67")]
        Item67,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("70")]
        Item70,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("71")]
        Item71,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("72")]
        Item72,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("73")]
        Item73,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("74")]
        Item74,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("75")]
        Item75,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("98")]
        Item98,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("99")]
        Item99,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe", IncludeInSchema=false)]
    public enum ItemsChoiceType3
    {
        
        /// <remarks/>
        pCOFINS,
        
        /// <remarks/>
        qBCProd,
        
        /// <remarks/>
        vAliqProd,
        
        /// <remarks/>
        vBC,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoCOFINSCOFINSQtde
    {
        
        private TNFeInfNFeDetImpostoCOFINSCOFINSQtdeCST _cST;
        
        private string _qBCProd;
        
        private string _vAliqProd;
        
        private string _vCOFINS;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TNFeInfNFeDetImpostoCOFINSCOFINSQtdeCST CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string qBCProd
        {
            get
            {
                return this._qBCProd;
            }
            set
            {
                this._qBCProd = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string vAliqProd
        {
            get
            {
                return this._vAliqProd;
            }
            set
            {
                this._vAliqProd = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string vCOFINS
        {
            get
            {
                return this._vCOFINS;
            }
            set
            {
                this._vCOFINS = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoCOFINSCOFINSQtde));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSCOFINSQtde object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoCOFINSCOFINSQtde object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSCOFINSQtde object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoCOFINSCOFINSQtde obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSCOFINSQtde);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoCOFINSCOFINSQtde obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoCOFINSCOFINSQtde Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoCOFINSCOFINSQtde)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoCOFINSCOFINSQtde Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoCOFINSCOFINSQtde)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSCOFINSQtde object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoCOFINSCOFINSQtde object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSCOFINSQtde object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSCOFINSQtde obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSCOFINSQtde);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSCOFINSQtde obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoCOFINSCOFINSQtde LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoCOFINSCOFINSQtdeCST
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("03")]
        Item03,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoCOFINSST
    {
        
        private string[] _items;
        
        private ItemsChoiceType4[] _itemsElementName;
        
        private string _vCOFINS;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("pCOFINS", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("qBCProd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("vAliqProd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("vBC", Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public string[] Items
        {
            get
            {
                return this._items;
            }
            set
            {
                this._items = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType4[] ItemsElementName
        {
            get
            {
                return this._itemsElementName;
            }
            set
            {
                this._itemsElementName = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string vCOFINS
        {
            get
            {
                return this._vCOFINS;
            }
            set
            {
                this._vCOFINS = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoCOFINSST));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSST object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoCOFINSST object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSST object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoCOFINSST obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSST);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoCOFINSST obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoCOFINSST Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeDetImpostoCOFINSST)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeDetImpostoCOFINSST Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeDetImpostoCOFINSST)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSST object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoCOFINSST object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSST object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSST obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSST);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSST obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeDetImpostoCOFINSST LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe", IncludeInSchema=false)]
    public enum ItemsChoiceType4
    {
        
        /// <remarks/>
        pCOFINS,
        
        /// <remarks/>
        qBCProd,
        
        /// <remarks/>
        vAliqProd,
        
        /// <remarks/>
        vBC,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeTotal
    {
        
        private TNFeInfNFeTotalICMSTot _iCMSTot;
        
        private TNFeInfNFeTotalISSQNtot _iSSQNtot;
        
        private TNFeInfNFeTotalRetTrib _retTrib;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TNFeInfNFeTotalICMSTot ICMSTot
        {
            get
            {
                return this._iCMSTot;
            }
            set
            {
                this._iCMSTot = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public TNFeInfNFeTotalISSQNtot ISSQNtot
        {
            get
            {
                return this._iSSQNtot;
            }
            set
            {
                this._iSSQNtot = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public TNFeInfNFeTotalRetTrib retTrib
        {
            get
            {
                return this._retTrib;
            }
            set
            {
                this._retTrib = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeTotal));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTotal object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTotal object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTotal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeTotal obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTotal);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeTotal obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeTotal Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeTotal)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeTotal Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeTotal)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeTotal object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTotal object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTotal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeTotal obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTotal);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeTotal obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeTotal LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeTotalICMSTot
    {
        
        private string _vBC;
        
        private string _vICMS;
        
        private string _vBCST;
        
        private string _vST;
        
        private string _vProd;
        
        private string _vFrete;
        
        private string _vSeg;
        
        private string _vDesc;
        
        private string _vII;
        
        private string _vIPI;
        
        private string _vPIS;
        
        private string _vCOFINS;
        
        private string _vOutro;
        
        private string _vNF;
        
        private string _vTotTrib;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string vBC
        {
            get
            {
                return this._vBC;
            }
            set
            {
                this._vBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string vICMS
        {
            get
            {
                return this._vICMS;
            }
            set
            {
                this._vICMS = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string vBCST
        {
            get
            {
                return this._vBCST;
            }
            set
            {
                this._vBCST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string vST
        {
            get
            {
                return this._vST;
            }
            set
            {
                this._vST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string vProd
        {
            get
            {
                return this._vProd;
            }
            set
            {
                this._vProd = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string vFrete
        {
            get
            {
                return this._vFrete;
            }
            set
            {
                this._vFrete = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string vSeg
        {
            get
            {
                return this._vSeg;
            }
            set
            {
                this._vSeg = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string vDesc
        {
            get
            {
                return this._vDesc;
            }
            set
            {
                this._vDesc = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string vII
        {
            get
            {
                return this._vII;
            }
            set
            {
                this._vII = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string vIPI
        {
            get
            {
                return this._vIPI;
            }
            set
            {
                this._vIPI = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string vPIS
        {
            get
            {
                return this._vPIS;
            }
            set
            {
                this._vPIS = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string vCOFINS
        {
            get
            {
                return this._vCOFINS;
            }
            set
            {
                this._vCOFINS = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public string vOutro
        {
            get
            {
                return this._vOutro;
            }
            set
            {
                this._vOutro = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public string vNF
        {
            get
            {
                return this._vNF;
            }
            set
            {
                this._vNF = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public string vTotTrib
        {
            get
            {
                return this._vTotTrib;
            }
            set
            {
                this._vTotTrib = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeTotalICMSTot));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTotalICMSTot object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTotalICMSTot object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTotalICMSTot object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeTotalICMSTot obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTotalICMSTot);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeTotalICMSTot obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeTotalICMSTot Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeTotalICMSTot)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeTotalICMSTot Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeTotalICMSTot)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeTotalICMSTot object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTotalICMSTot object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTotalICMSTot object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeTotalICMSTot obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTotalICMSTot);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeTotalICMSTot obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeTotalICMSTot LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeTotalISSQNtot
    {
        
        private string _vServ;
        
        private string _vBC;
        
        private string _vISS;
        
        private string _vPIS;
        
        private string _vCOFINS;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string vServ
        {
            get
            {
                return this._vServ;
            }
            set
            {
                this._vServ = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string vBC
        {
            get
            {
                return this._vBC;
            }
            set
            {
                this._vBC = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string vISS
        {
            get
            {
                return this._vISS;
            }
            set
            {
                this._vISS = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string vPIS
        {
            get
            {
                return this._vPIS;
            }
            set
            {
                this._vPIS = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string vCOFINS
        {
            get
            {
                return this._vCOFINS;
            }
            set
            {
                this._vCOFINS = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeTotalISSQNtot));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTotalISSQNtot object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTotalISSQNtot object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTotalISSQNtot object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeTotalISSQNtot obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTotalISSQNtot);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeTotalISSQNtot obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeTotalISSQNtot Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeTotalISSQNtot)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeTotalISSQNtot Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeTotalISSQNtot)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeTotalISSQNtot object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTotalISSQNtot object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTotalISSQNtot object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeTotalISSQNtot obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTotalISSQNtot);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeTotalISSQNtot obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeTotalISSQNtot LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeTotalRetTrib
    {
        
        private string _vRetPIS;
        
        private string _vRetCOFINS;
        
        private string _vRetCSLL;
        
        private string _vBCIRRF;
        
        private string _vIRRF;
        
        private string _vBCRetPrev;
        
        private string _vRetPrev;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string vRetPIS
        {
            get
            {
                return this._vRetPIS;
            }
            set
            {
                this._vRetPIS = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string vRetCOFINS
        {
            get
            {
                return this._vRetCOFINS;
            }
            set
            {
                this._vRetCOFINS = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string vRetCSLL
        {
            get
            {
                return this._vRetCSLL;
            }
            set
            {
                this._vRetCSLL = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string vBCIRRF
        {
            get
            {
                return this._vBCIRRF;
            }
            set
            {
                this._vBCIRRF = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string vIRRF
        {
            get
            {
                return this._vIRRF;
            }
            set
            {
                this._vIRRF = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string vBCRetPrev
        {
            get
            {
                return this._vBCRetPrev;
            }
            set
            {
                this._vBCRetPrev = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string vRetPrev
        {
            get
            {
                return this._vRetPrev;
            }
            set
            {
                this._vRetPrev = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeTotalRetTrib));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTotalRetTrib object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTotalRetTrib object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTotalRetTrib object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeTotalRetTrib obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTotalRetTrib);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeTotalRetTrib obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeTotalRetTrib Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeTotalRetTrib)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeTotalRetTrib Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeTotalRetTrib)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeTotalRetTrib object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTotalRetTrib object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTotalRetTrib object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeTotalRetTrib obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTotalRetTrib);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeTotalRetTrib obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeTotalRetTrib LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeTransp
    {
        
        private TNFeInfNFeTranspModFrete _modFrete;
        
        private TNFeInfNFeTranspTransporta _transporta;
        
        private TNFeInfNFeTranspRetTransp _retTransp;
        
        private object[] _items;
        
        private ItemsChoiceType5[] _itemsElementName;
        
        private List<TNFeInfNFeTranspVol> _vol;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TNFeInfNFeTranspModFrete modFrete
        {
            get
            {
                return this._modFrete;
            }
            set
            {
                this._modFrete = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public TNFeInfNFeTranspTransporta transporta
        {
            get
            {
                return this._transporta;
            }
            set
            {
                this._transporta = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public TNFeInfNFeTranspRetTransp retTransp
        {
            get
            {
                return this._retTransp;
            }
            set
            {
                this._retTransp = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("balsa", typeof(string), Order=3)]
        [System.Xml.Serialization.XmlElementAttribute("reboque", typeof(TVeiculo), Order=3)]
        [System.Xml.Serialization.XmlElementAttribute("vagao", typeof(string), Order=3)]
        [System.Xml.Serialization.XmlElementAttribute("veicTransp", typeof(TVeiculo), Order=3)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items
        {
            get
            {
                return this._items;
            }
            set
            {
                this._items = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order=4)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType5[] ItemsElementName
        {
            get
            {
                return this._itemsElementName;
            }
            set
            {
                this._itemsElementName = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("vol", Order=5)]
        public List<TNFeInfNFeTranspVol> vol
        {
            get
            {
                return this._vol;
            }
            set
            {
                this._vol = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeTransp));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTransp object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTransp object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTransp object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeTransp obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTransp);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeTransp obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeTransp Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeTransp)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeTransp Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeTransp)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeTransp object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTransp object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTransp object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeTransp obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTransp);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeTransp obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeTransp LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeTranspModFrete
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("9")]
        Item9,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeTranspTransporta
    {
        
        private string _item;
        
        private ItemChoiceType5 _itemElementName;
        
        private string _xNome;
        
        private string _ie;
        
        private string _xEnder;
        
        private string _xMun;
        
        private TUf _uf;
        
        private bool ufFieldSpecified;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("CNPJ", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("CPF", Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item
        {
            get
            {
                return this._item;
            }
            set
            {
                this._item = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType5 ItemElementName
        {
            get
            {
                return this._itemElementName;
            }
            set
            {
                this._itemElementName = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string xNome
        {
            get
            {
                return this._xNome;
            }
            set
            {
                this._xNome = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string IE
        {
            get
            {
                return this._ie;
            }
            set
            {
                this._ie = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string xEnder
        {
            get
            {
                return this._xEnder;
            }
            set
            {
                this._xEnder = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string xMun
        {
            get
            {
                return this._xMun;
            }
            set
            {
                this._xMun = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public TUf UF
        {
            get
            {
                return this._uf;
            }
            set
            {
                this._uf = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UFSpecified
        {
            get
            {
                return this.ufFieldSpecified;
            }
            set
            {
                this.ufFieldSpecified = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeTranspTransporta));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTranspTransporta object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTranspTransporta object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTranspTransporta object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeTranspTransporta obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTranspTransporta);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeTranspTransporta obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeTranspTransporta Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeTranspTransporta)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeTranspTransporta Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeTranspTransporta)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeTranspTransporta object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTranspTransporta object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTranspTransporta object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeTranspTransporta obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTranspTransporta);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeTranspTransporta obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeTranspTransporta LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe", IncludeInSchema=false)]
    public enum ItemChoiceType5
    {
        
        /// <remarks/>
        CNPJ,
        
        /// <remarks/>
        CPF,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeTranspRetTransp
    {
        
        private string _vServ;
        
        private string _vBCRet;
        
        private string _pICMSRet;
        
        private string _vICMSRet;
        
        private TCfopTransp _cFOP;
        
        private string _cMunFG;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string vServ
        {
            get
            {
                return this._vServ;
            }
            set
            {
                this._vServ = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string vBCRet
        {
            get
            {
                return this._vBCRet;
            }
            set
            {
                this._vBCRet = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string pICMSRet
        {
            get
            {
                return this._pICMSRet;
            }
            set
            {
                this._pICMSRet = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string vICMSRet
        {
            get
            {
                return this._vICMSRet;
            }
            set
            {
                this._vICMSRet = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public TCfopTransp CFOP
        {
            get
            {
                return this._cFOP;
            }
            set
            {
                this._cFOP = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string cMunFG
        {
            get
            {
                return this._cMunFG;
            }
            set
            {
                this._cMunFG = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeTranspRetTransp));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTranspRetTransp object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTranspRetTransp object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTranspRetTransp object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeTranspRetTransp obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTranspRetTransp);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeTranspRetTransp obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeTranspRetTransp Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeTranspRetTransp)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeTranspRetTransp Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeTranspRetTransp)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeTranspRetTransp object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTranspRetTransp object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTranspRetTransp object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeTranspRetTransp obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTranspRetTransp);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeTranspRetTransp obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeTranspRetTransp LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TCfopTransp
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5351")]
        Item5351,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5352")]
        Item5352,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5353")]
        Item5353,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5354")]
        Item5354,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5355")]
        Item5355,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5356")]
        Item5356,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5357")]
        Item5357,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5359")]
        Item5359,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5360")]
        Item5360,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5931")]
        Item5931,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5932")]
        Item5932,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6351")]
        Item6351,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6352")]
        Item6352,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6353")]
        Item6353,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6354")]
        Item6354,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6355")]
        Item6355,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6356")]
        Item6356,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6357")]
        Item6357,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6359")]
        Item6359,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6360")]
        Item6360,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6931")]
        Item6931,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6932")]
        Item6932,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7358")]
        Item7358,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.portalfiscal.inf.br/nfe", IncludeInSchema=false)]
    public enum ItemsChoiceType5
    {
        
        /// <remarks/>
        balsa,
        
        /// <remarks/>
        reboque,
        
        /// <remarks/>
        vagao,
        
        /// <remarks/>
        veicTransp,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeTranspVol
    {
        
        private string _qVol;
        
        private string _esp;
        
        private string _marca;
        
        private string _nVol;
        
        private string _pesoL;
        
        private string _pesoB;
        
        private List<TNFeInfNFeTranspVolLacres> _lacres;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string qVol
        {
            get
            {
                return this._qVol;
            }
            set
            {
                this._qVol = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string esp
        {
            get
            {
                return this._esp;
            }
            set
            {
                this._esp = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string marca
        {
            get
            {
                return this._marca;
            }
            set
            {
                this._marca = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string nVol
        {
            get
            {
                return this._nVol;
            }
            set
            {
                this._nVol = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string pesoL
        {
            get
            {
                return this._pesoL;
            }
            set
            {
                this._pesoL = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string pesoB
        {
            get
            {
                return this._pesoB;
            }
            set
            {
                this._pesoB = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("lacres", Order=6)]
        public List<TNFeInfNFeTranspVolLacres> lacres
        {
            get
            {
                return this._lacres;
            }
            set
            {
                this._lacres = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeTranspVol));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTranspVol object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTranspVol object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTranspVol object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeTranspVol obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTranspVol);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeTranspVol obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeTranspVol Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeTranspVol)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeTranspVol Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeTranspVol)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeTranspVol object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTranspVol object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTranspVol object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeTranspVol obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTranspVol);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeTranspVol obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeTranspVol LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeTranspVolLacres
    {
        
        private string _nLacre;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string nLacre
        {
            get
            {
                return this._nLacre;
            }
            set
            {
                this._nLacre = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeTranspVolLacres));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTranspVolLacres object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTranspVolLacres object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTranspVolLacres object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeTranspVolLacres obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTranspVolLacres);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeTranspVolLacres obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeTranspVolLacres Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeTranspVolLacres)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeTranspVolLacres Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeTranspVolLacres)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeTranspVolLacres object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTranspVolLacres object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTranspVolLacres object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeTranspVolLacres obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTranspVolLacres);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeTranspVolLacres obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeTranspVolLacres LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeCobr
    {
        
        private TNFeInfNFeCobrFat _fat;
        
        private List<TNFeInfNFeCobrDup> _dup;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TNFeInfNFeCobrFat fat
        {
            get
            {
                return this._fat;
            }
            set
            {
                this._fat = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("dup", Order=1)]
        public List<TNFeInfNFeCobrDup> dup
        {
            get
            {
                return this._dup;
            }
            set
            {
                this._dup = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeCobr));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeCobr object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeCobr object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCobr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeCobr obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCobr);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeCobr obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeCobr Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeCobr)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeCobr Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeCobr)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeCobr object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeCobr object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCobr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeCobr obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCobr);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeCobr obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeCobr LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeCobrFat
    {
        
        private string _nFat;
        
        private string _vOrig;
        
        private string _vDesc;
        
        private string _vLiq;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string nFat
        {
            get
            {
                return this._nFat;
            }
            set
            {
                this._nFat = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string vOrig
        {
            get
            {
                return this._vOrig;
            }
            set
            {
                this._vOrig = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string vDesc
        {
            get
            {
                return this._vDesc;
            }
            set
            {
                this._vDesc = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string vLiq
        {
            get
            {
                return this._vLiq;
            }
            set
            {
                this._vLiq = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeCobrFat));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeCobrFat object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeCobrFat object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCobrFat object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeCobrFat obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCobrFat);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeCobrFat obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeCobrFat Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeCobrFat)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeCobrFat Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeCobrFat)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeCobrFat object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeCobrFat object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCobrFat object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeCobrFat obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCobrFat);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeCobrFat obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeCobrFat LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeCobrDup
    {
        
        private string _nDup;
        
        private string _dVenc;
        
        private string _vDup;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string nDup
        {
            get
            {
                return this._nDup;
            }
            set
            {
                this._nDup = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string dVenc
        {
            get
            {
                return this._dVenc;
            }
            set
            {
                this._dVenc = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string vDup
        {
            get
            {
                return this._vDup;
            }
            set
            {
                this._vDup = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeCobrDup));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeCobrDup object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeCobrDup object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCobrDup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeCobrDup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCobrDup);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeCobrDup obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeCobrDup Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeCobrDup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeCobrDup Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeCobrDup)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeCobrDup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeCobrDup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCobrDup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeCobrDup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCobrDup);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeCobrDup obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeCobrDup LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeInfAdic
    {
        
        private string _infAdFisco;
        
        private string _infCpl;
        
        private List<TNFeInfNFeInfAdicObsCont> _obsCont;
        
        private List<TNFeInfNFeInfAdicObsFisco> _obsFisco;
        
        private List<TNFeInfNFeInfAdicProcRef> _procRef;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string infAdFisco
        {
            get
            {
                return this._infAdFisco;
            }
            set
            {
                this._infAdFisco = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string infCpl
        {
            get
            {
                return this._infCpl;
            }
            set
            {
                this._infCpl = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("obsCont", Order=2)]
        public List<TNFeInfNFeInfAdicObsCont> obsCont
        {
            get
            {
                return this._obsCont;
            }
            set
            {
                this._obsCont = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("obsFisco", Order=3)]
        public List<TNFeInfNFeInfAdicObsFisco> obsFisco
        {
            get
            {
                return this._obsFisco;
            }
            set
            {
                this._obsFisco = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("procRef", Order=4)]
        public List<TNFeInfNFeInfAdicProcRef> procRef
        {
            get
            {
                return this._procRef;
            }
            set
            {
                this._procRef = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeInfAdic));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeInfAdic object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeInfAdic object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeInfAdic object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeInfAdic obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeInfAdic);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeInfAdic obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeInfAdic Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeInfAdic)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeInfAdic Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeInfAdic)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeInfAdic object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeInfAdic object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeInfAdic object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeInfAdic obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeInfAdic);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeInfAdic obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeInfAdic LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeInfAdicObsCont
    {
        
        private string _xTexto;
        
        private string _xCampo;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string xTexto
        {
            get
            {
                return this._xTexto;
            }
            set
            {
                this._xTexto = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string xCampo
        {
            get
            {
                return this._xCampo;
            }
            set
            {
                this._xCampo = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeInfAdicObsCont));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeInfAdicObsCont object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeInfAdicObsCont object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeInfAdicObsCont object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeInfAdicObsCont obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeInfAdicObsCont);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeInfAdicObsCont obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeInfAdicObsCont Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeInfAdicObsCont)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeInfAdicObsCont Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeInfAdicObsCont)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeInfAdicObsCont object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeInfAdicObsCont object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeInfAdicObsCont object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeInfAdicObsCont obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeInfAdicObsCont);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeInfAdicObsCont obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeInfAdicObsCont LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeInfAdicObsFisco
    {
        
        private string _xTexto;
        
        private string _xCampo;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string xTexto
        {
            get
            {
                return this._xTexto;
            }
            set
            {
                this._xTexto = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string xCampo
        {
            get
            {
                return this._xCampo;
            }
            set
            {
                this._xCampo = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeInfAdicObsFisco));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeInfAdicObsFisco object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeInfAdicObsFisco object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeInfAdicObsFisco object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeInfAdicObsFisco obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeInfAdicObsFisco);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeInfAdicObsFisco obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeInfAdicObsFisco Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeInfAdicObsFisco)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeInfAdicObsFisco Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeInfAdicObsFisco)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeInfAdicObsFisco object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeInfAdicObsFisco object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeInfAdicObsFisco object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeInfAdicObsFisco obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeInfAdicObsFisco);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeInfAdicObsFisco obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeInfAdicObsFisco LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeInfAdicProcRef
    {
        
        private string _nProc;
        
        private TNFeInfNFeInfAdicProcRefIndProc _indProc;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string nProc
        {
            get
            {
                return this._nProc;
            }
            set
            {
                this._nProc = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public TNFeInfNFeInfAdicProcRefIndProc indProc
        {
            get
            {
                return this._indProc;
            }
            set
            {
                this._indProc = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeInfAdicProcRef));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeInfAdicProcRef object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeInfAdicProcRef object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeInfAdicProcRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeInfAdicProcRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeInfAdicProcRef);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeInfAdicProcRef obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeInfAdicProcRef Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeInfAdicProcRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeInfAdicProcRef Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeInfAdicProcRef)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeInfAdicProcRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeInfAdicProcRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeInfAdicProcRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeInfAdicProcRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeInfAdicProcRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeInfAdicProcRef obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeInfAdicProcRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeInfAdicProcRefIndProc
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("9")]
        Item9,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeExporta
    {
        
        private TUf _uFEmbarq;
        
        private string _xLocEmbarq;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TUf UFEmbarq
        {
            get
            {
                return this._uFEmbarq;
            }
            set
            {
                this._uFEmbarq = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string xLocEmbarq
        {
            get
            {
                return this._xLocEmbarq;
            }
            set
            {
                this._xLocEmbarq = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeExporta));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeExporta object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeExporta object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeExporta object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeExporta obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeExporta);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeExporta obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeExporta Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeExporta)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeExporta Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeExporta)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeExporta object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeExporta object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeExporta object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeExporta obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeExporta);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeExporta obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeExporta LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeCompra
    {
        
        private string _xNEmp;
        
        private string _xPed;
        
        private string _xCont;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string xNEmp
        {
            get
            {
                return this._xNEmp;
            }
            set
            {
                this._xNEmp = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string xPed
        {
            get
            {
                return this._xPed;
            }
            set
            {
                this._xPed = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string xCont
        {
            get
            {
                return this._xCont;
            }
            set
            {
                this._xCont = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeCompra));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeCompra object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeCompra object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCompra object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeCompra obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCompra);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeCompra obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeCompra Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeCompra)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeCompra Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeCompra)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeCompra object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeCompra object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCompra object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeCompra obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCompra);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeCompra obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeCompra LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeCana
    {
        
        private string _safra;
        
        private string _ref;
        
        private List<TNFeInfNFeCanaForDia> _forDia;
        
        private string _qTotMes;
        
        private string _qTotAnt;
        
        private string _qTotGer;
        
        private List<TNFeInfNFeCanaDeduc> _deduc;
        
        private string _vFor;
        
        private string _vTotDed;
        
        private string _vLiqFor;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string safra
        {
            get
            {
                return this._safra;
            }
            set
            {
                this._safra = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string @ref
        {
            get
            {
                return this._ref;
            }
            set
            {
                this._ref = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("forDia", Order=2)]
        public List<TNFeInfNFeCanaForDia> forDia
        {
            get
            {
                return this._forDia;
            }
            set
            {
                this._forDia = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string qTotMes
        {
            get
            {
                return this._qTotMes;
            }
            set
            {
                this._qTotMes = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string qTotAnt
        {
            get
            {
                return this._qTotAnt;
            }
            set
            {
                this._qTotAnt = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string qTotGer
        {
            get
            {
                return this._qTotGer;
            }
            set
            {
                this._qTotGer = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("deduc", Order=6)]
        public List<TNFeInfNFeCanaDeduc> deduc
        {
            get
            {
                return this._deduc;
            }
            set
            {
                this._deduc = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string vFor
        {
            get
            {
                return this._vFor;
            }
            set
            {
                this._vFor = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string vTotDed
        {
            get
            {
                return this._vTotDed;
            }
            set
            {
                this._vTotDed = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string vLiqFor
        {
            get
            {
                return this._vLiqFor;
            }
            set
            {
                this._vLiqFor = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeCana));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeCana object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeCana object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCana object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeCana obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCana);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeCana obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeCana Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeCana)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeCana Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeCana)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeCana object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeCana object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCana object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeCana obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCana);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeCana obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeCana LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeCanaForDia
    {
        
        private string _qtde;
        
        private string _dia;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string qtde
        {
            get
            {
                return this._qtde;
            }
            set
            {
                this._qtde = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string dia
        {
            get
            {
                return this._dia;
            }
            set
            {
                this._dia = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeCanaForDia));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeCanaForDia object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeCanaForDia object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCanaForDia object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeCanaForDia obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCanaForDia);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeCanaForDia obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeCanaForDia Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeCanaForDia)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeCanaForDia Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeCanaForDia)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeCanaForDia object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeCanaForDia object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCanaForDia object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeCanaForDia obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCanaForDia);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeCanaForDia obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeCanaForDia LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeCanaDeduc
    {
        
        private string _xDed;
        
        private string _vDed;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string xDed
        {
            get
            {
                return this._xDed;
            }
            set
            {
                this._xDed = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string vDed
        {
            get
            {
                return this._vDed;
            }
            set
            {
                this._vDed = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeCanaDeduc));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeCanaDeduc object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeCanaDeduc object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCanaDeduc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeCanaDeduc obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCanaDeduc);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TNFeInfNFeCanaDeduc obj)
        {
            System.Exception exception;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TNFeInfNFeCanaDeduc Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TNFeInfNFeCanaDeduc)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TNFeInfNFeCanaDeduc Deserialize(System.IO.Stream s)
        {
            return ((TNFeInfNFeCanaDeduc)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TNFeInfNFeCanaDeduc object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeCanaDeduc object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCanaDeduc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeCanaDeduc obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCanaDeduc);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TNFeInfNFeCanaDeduc obj)
        {
            System.Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TNFeInfNFeCanaDeduc LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
}
#pragma warning restore
